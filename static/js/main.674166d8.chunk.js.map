{"version":3,"sources":["util/util.js","components/CenterTile.jsx","components/CharTile.jsx","components/App.jsx","index.js"],"names":["getRandomAsciiChar","validNums","i","push","randNum","Math","round","random","length","String","fromCharCode","getLanding","docHeight","docWidth","landingLines","split","filter","line","map","trim","formattedLines","y","row","x","char","displayNumArr","getDisplayNumMatrix","num","el","str","getWinningBoard","winner","displayWinner","winningLines","formattedWinningLines","getDisclaimer","disclaimerLines","formattedDisclaimerLines","window","getNum","getWin","disclaimer","color","colorThemeLines","formattedColorThemeLines","CharTile","active","selected","handleClick","isBall","isPaddle","tileRef","useRef","className","ref","onClick","MemoizedCharTile","React","memo","SET_TILES","SET_TILE","SET_CLICK_HANDLER","SET_PLAYERS","INCREMENT_SCORE","RESET_SCORE","reducer","state","action","nextState","Object","assign","type","tileMatrix","payload","properties","offsetX","offsetY","players","includes","oldScore","gameState","score","player","p1","p2","initialState","landing","game","undefined","App","useReducer","dispatch","useState","setP1PaddleCenter","setP2PaddleCenter","isGameActive","setIsGameActive","isGameActiveRef","getRandomUnitDirectionVector","xCoeff","yCoeff","magnitude","sqrt","pow","ballDirection","setBallDirection","ballPosition","setBallPosition","ballDirectionRef","ballPositionRef","paddle1YDiffRef","paddle2YDiffRef","paddle1PrevYRef","paddle2PrevYRef","gameTickRef","validKeys","numPlayersRef","keyDownRef","setTile","setClickHandler","incrementScore","resetScores","increment","reset","appRef","numXTiles","floor","document","body","clientWidth","numYTiles","clientHeight","useEffect","initialRefMatrix","refObj","setupLanding","setupDisclaimer","setupPlayerKeybinds","landingMatrix","currEl","setupClickEvents","setPlayersCallback","startGameCallback","current","setPlayers","clearLanding","setupGameArea","randChar","xCenter","yCenter","halfWidth","halfHeight","setupGameBounds","setupScoreBoard","setupPaddles","moveBallToPos","setInterval","handleBallGameTick","handlePaddlesGameTick","x1","x2","y1","y2","yOffset","xOffsetLeft","xOffsetRight","zero","currChar","prevScore","currScore","prevScoreDisplay","currScoreDisplay","clearInterval","showWinningScreen","addEventListener","e","code","KeyW","KeyS","ArrowUp","ArrowDown","p1PaddleX","p2PaddleX","movePaddleTo","paddleX","from","to","nextX","nextY","nextPos","tempHitboxFix","p1PaddleCenter","p2PaddleCenter","paddleCenter","newDir","getPaddleBouncedDir","resetBallDirection","yBounceDir","ballY","xDir","angle","PI","angleThreshold","abs","tan","randDir","winningMatrix","setupMainMenuClickHandler","resetGameToLanding","clearWinningScreen","clearGameBounds","clearScore","clearPaddles","leftScore","leftScoreMatrix","rightScore","rightScoreMatrix","paddle1X","p1Center","paddle2X","p2Center","disclaimerMatrix","xidx","tile","yidx","centerTileComponent","leftWall","rightWall","topWall","bottomWall","ReactDOM","render","getElementById"],"mappings":"qMAAaA,EAAqB,WAKhC,IAFA,IAAMC,EAAY,GAETC,EAAI,GAAIA,GAAK,IAAKA,KACrBA,EAAI,KAAOA,EAAI,MACjBD,EAAUE,KAAKD,GAInB,IACME,EAAUH,EADAI,KAAKC,MAAMD,KAAKE,SAAWN,EAAUO,SAErD,OAAOC,OAAOC,aAAaN,IAgBhBO,EAAa,SAACC,EAAWC,GA8BpC,IA7BA,IAqBIC,EArBa,ozBAsBdC,MAAM,MACNC,QAAO,SAACC,GAAD,MAAmB,KAATA,KACjBC,KAAI,SAACD,GAAD,OAAUA,EAAKE,UAElBC,EAAiB,GAGbC,EAAI,EAAGA,EAAIP,EAAaN,OAAQa,IAAK,CAG3C,IAFA,IAAMC,EAAM,GAEJC,EAAI,EAAGA,EAAIT,EAAa,GAAGN,OAAQe,IACzCD,EAAInB,KAAK,CAAEqB,KAAMV,EAAaO,GAAGE,KAGnCH,EAAejB,KAAKmB,GAKtB,OAAOF,GAIHK,EAAgB,CAAC,kGAAD,s+BA+DTC,EAAsB,SAACC,GAGlC,OAAOF,EAAcE,GAAKZ,MAAM,MAAMC,QAAO,SAACY,GAAD,MAAe,KAAPA,KAAWV,KAAI,SAACW,GAAD,OAASA,EAAId,MAAM,QAG5Ee,EAAkB,SAACC,GA2B9B,IA1BA,IAAMC,EAAa,WAAOD,GAkBtBE,EAjBc,yNAIgBD,EAJhB,0oBAkBfjB,MAAM,MACNC,QAAO,SAACC,GAAD,MAAmB,KAATA,KACjBC,KAAI,SAACD,GAAD,OAAUA,EAAKE,UAElBe,EAAwB,GAGpBb,EAAI,EAAGA,EAAIY,EAAazB,OAAQa,IAAK,CAG3C,IAFA,IAAMC,EAAM,GAEJC,EAAI,EAAGA,EAAIU,EAAa,GAAGzB,OAAQe,IACzCD,EAAInB,KAAK,CAAEqB,KAAMS,EAAaZ,GAAGE,KAGnCW,EAAsB/B,KAAKmB,GAG7B,OAAOY,GAGIC,EAAgB,WAmB3B,IAjBA,IASIC,EATe,orBAUhBrB,MAAM,MACNC,QAAO,SAACC,GAAD,MAAmB,KAATA,KACjBC,KAAI,SAACD,GAAD,OAAUA,EAAKE,UAElBkB,EAA2B,GAGvBhB,EAAI,EAAGA,EAAIe,EAAgB5B,OAAQa,IAAK,CAG9C,IAFA,IAAMC,EAAM,GAEJC,EAAI,EAAGA,EAAIa,EAAgB,GAAG5B,OAAQe,IAC5CD,EAAInB,KAAK,CAAEqB,KAAMY,EAAgBf,GAAGE,KAGtCc,EAAyBlC,KAAKmB,GAGhC,OAAOe,GAmCTC,OAAO3B,WAAaA,EACpB2B,OAAOC,OAASb,EAChBY,OAAOE,OAASV,EAChBQ,OAAOG,WAAaN,EACpBG,OAAOI,MApC4B,WAmBjC,IAlBA,IAUIC,EAVe,2TAWhB5B,MAAM,MACNC,QAAO,SAACC,GAAD,MAAmB,KAATA,KACjBC,KAAI,SAACD,GAAD,OAAUA,EAAKE,UAElByB,EAA2B,GAGvBvB,EAAI,EAAGA,EAAIsB,EAAgBnC,OAAQa,IAAK,CAG9C,IAFA,IAAMC,EAAM,GAEJC,EAAI,EAAGA,EAAIoB,EAAgB,GAAGnC,OAAQe,IAC5CD,EAAInB,KAAK,CAAEqB,KAAMmB,EAAgBtB,GAAGE,KAGtCqB,EAAyBzC,KAAKmB,GAGhC,OAAOsB,GCnPT,ICAMC,EAAW,SAAC,GAOX,IANLrB,EAMI,EANJA,KACAsB,EAKI,EALJA,OACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,OACAC,EACI,EADJA,SAEMC,EAAUC,mBAIhB,OACE,qBACEC,UAAS,uCAELP,EAAS,SAAW,GAFf,qBAGLC,EAAW,WAAa,GAHnB,qBAILC,EAAc,eAAiB,GAJ1B,qBAKLC,EAAS,OAAS,GALb,qBAMLC,EAAW,SAAW,GANjB,YAQTI,IAAKH,EACLI,QAASP,EAVX,SAYGxB,KAOQgC,EAFUC,IAAMC,KAAKb,GCzB9Bc,EAAY,WACZC,EAAW,UACXC,EAAoB,kBACpBC,EAAc,aACdC,EAAkB,iBAClBC,EAAc,aAEdC,EAAU,SAACC,EAAOC,GACtB,IAEI5C,EACAF,EAHA+C,EAAYC,OAAOC,OAAO,GAAIJ,GAKlC,OAAQC,EAAOI,MACb,KAAKZ,EAEH,OADAS,EAAUI,WAAaL,EAAOM,QACvBL,EACT,KAAKR,EACHrC,EAAI4C,EAAOM,QAAQlD,EACnBF,EAAI8C,EAAOM,QAAQpD,EAFrB,MAG+B8C,EAAOM,QAA5BjD,EAHV,EAGUA,KAAMkD,EAHhB,EAGgBA,WAGd,OAFAN,EAAUI,WAAWnD,GAAGE,GAAGC,KAAOA,EAClC4C,EAAUI,WAAWnD,GAAGE,GAAGmD,WAAaA,EACjCN,EACT,KAAKP,EACHtC,EAAI4C,EAAOM,QAAQlD,EACnBF,EAAI8C,EAAOM,QAAQpD,EAFrB,IAGU2B,EAAgBmB,EAAOM,QAAvBzB,YAER,OADAoB,EAAUI,WAAWnD,GAAGE,GAAGmD,WAAW1B,YAAcA,EAC7CoB,EACT,KAAKN,EAAL,MAC+BK,EAAOM,QAA5BE,EADV,EACUA,QAASC,EADnB,EACmBA,QAEjB,GADAR,EAAUS,QAAUV,EAAOM,QAAQI,QACT,IAAtBT,EAAUS,QAAe,CAE3B,IAAK,IAAIxD,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,GAAK,GAAIA,IACb,IAANF,EACE,CAAC,EAAG,EAAG,GAAI,IAAIyD,SAASvD,KAC1B6C,EAAUI,WAAWnD,EAAIuD,GAASrD,EAAIoD,GAASD,WAAW3B,UAAW,GAGvEqB,EAAUI,WAAWnD,EAAIuD,GAASrD,EAAIoD,GAASD,WAAW3B,UAAW,EAM3E,IAAK,IAAI1B,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,GAAIA,GAAK,GAAIA,IACd,IAANF,EACE,CAAC,GAAI,GAAI,GAAI,IAAIyD,SAASvD,KAC5B6C,EAAUI,WAAWnD,EAAIuD,GAASrD,EAAIoD,GAASD,WAAW3B,UAAW,GAGvEqB,EAAUI,WAAWnD,EAAIuD,GAASrD,EAAIoD,GAASD,WAAW3B,UAAW,MAItE,CAEL,IAAK,IAAI1B,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,GAAK,GAAIA,IACb,IAANF,EACE,CAAC,EAAG,EAAG,GAAI,IAAIyD,SAASvD,KAC1B6C,EAAUI,WAAWnD,EAAIuD,GAASrD,EAAIoD,GAASD,WAAW3B,UAAW,GAGvEqB,EAAUI,WAAWnD,EAAIuD,GAASrD,EAAIoD,GAASD,WAAW3B,UAAW,EAM3E,IAAK,IAAI1B,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,GAAIA,GAAK,GAAIA,IACd,IAANF,EACE,CAAC,GAAI,GAAI,GAAI,IAAIyD,SAASvD,KAC5B6C,EAAUI,WAAWnD,EAAIuD,GAASrD,EAAIoD,GAASD,WAAW3B,UAAW,GAGvEqB,EAAUI,WAAWnD,EAAIuD,GAASrD,EAAIoD,GAASD,WAAW3B,UAAW,EAK7E,OAAOqB,EACT,KAAKL,EACH,IAAMgB,EAAWb,EAAMc,UAAUC,MAAhB,WAA0Bd,EAAOM,QAAQS,SAE1D,OADAd,EAAUY,UAAUC,MAApB,WAA8Bd,EAAOM,QAAQS,SAAYH,EAAWZ,EAAOM,QAAQQ,MAC5Eb,EACT,KAAKJ,EAGH,OAFAI,EAAUY,UAAUC,MAAME,GAAK,EAC/Bf,EAAUY,UAAUC,MAAMG,GAAK,EACxBhB,EACT,QACE,OAAOF,IAIPmB,EAAe,CACnBb,WAAY,GACZK,QAAS,EAETG,UAAW,CACTM,SAAS,EACTC,MAAM,EACNxD,YAAQyD,EACRP,MAAO,CACLE,GAAI,EACJC,GAAI,KA47BKK,EAv7BH,WAAO,IAAD,EACUC,qBAAWzB,EAASoB,GAD9B,mBACTnB,EADS,KACFyB,EADE,OAE4BC,qBAF5B,mBAEOC,GAFP,aAG4BD,qBAH5B,mBAGOE,GAHP,aAKwBF,oBAAS,GALjC,mBAKTG,EALS,KAKKC,EALL,KAMVC,EAAkB7C,iBAAO2C,GAIzBG,EAA+B,WAEnC,IAAM3E,EAAI,GAAAlB,KAAKE,SAJK,GAKdc,EAAIhB,KAAKE,SACT4F,EAAuC,IAA9B9F,KAAKC,MAAMD,KAAKE,WAAmB,EAAI,EAChD6F,EAAuC,IAA9B/F,KAAKC,MAAMD,KAAKE,WAAmB,EAAI,EAChD8F,EAAYhG,KAAKiG,KAAKjG,KAAKkG,IAAIhF,EAAG,GAAKlB,KAAKkG,IAAIlF,EAAG,IACzD,MAAO,CAAEE,EAAG4E,EAAS5E,EAAI8E,EAAWhF,EAAG+E,EAAS/E,EAAIgF,IAjBtC,EAoB0BT,mBAASM,KApBnC,mBAoBTM,EApBS,KAoBMC,EApBN,OAsBwBb,mBAAS,CAAErE,EAAG,EAAGF,EAAG,IAtB5C,mBAsBTqF,EAtBS,KAsBKC,EAtBL,KAuBVC,EAAmBxD,iBAAOoD,GAC1BK,EAAkBzD,iBAAOsD,GAEzBI,EAAkB1D,iBAAO,GACzB2D,EAAkB3D,iBAAO,GAEzB4D,EAAkB5D,iBAAO,GACzB6D,EAAkB7D,iBAAO,GAEzB8D,EAAc9D,mBAEd+D,EAAY,CAAC,OAAQ,OAAQ,UAAW,aAExCC,EAAgBhE,iBAAO,GAEvBiE,EAAajE,iBAAO,CACxB,MAAQ,EACR,MAAQ,EACR,SAAW,EACX,WAAa,IAQTkE,EAAU,SAAC/F,EAAGF,EAAGG,EAAMkD,GAAb,OAA4BiB,EAAS,CACnDpB,KAAMX,EACNa,QAAS,CACPlD,IACAF,IACAG,OACAkD,iBAIE6C,EAAkB,SAAChG,EAAGF,EAAG2B,GAAP,OAAuB2C,EAAS,CACtDpB,KAAMV,EACNY,QAAS,CACPlD,IACAF,IACA2B,kBAaEwE,EAAiB,SAACtC,GAAD,OAAYS,EAAS,CAC1CpB,KAAMR,EACNU,QAAS,CACPS,SACAD,MAAO,MAILwC,GAAc,kBAAM9B,EAAS,CACjCpB,KAAMP,KAGR1B,OAAOoF,UAAYF,EACnBlF,OAAOqF,MAAQF,GAEfnF,OAAOgF,QAAUA,EAGjB,IAAMM,GAASxE,mBAKXyE,GAAYxH,KAAKyH,MAAMC,SAASC,KAAKC,YAHJ,GAIjCC,GAAY7H,KAAKyH,MAAMC,SAASC,KAAKG,aAJR,IAO7BN,GAAY,IAAM,GACpBA,KAGEK,GAAY,IAAM,GACpBA,KAIFE,qBAAU,WAGR,IAFA,IAAMC,EAAmB,GAEhBhH,EAAI,EAAGA,EAAI6G,GAAW7G,IAAK,CAGlC,IAFA,IAAMC,EAAM,GAEHC,EAAI,EAAGA,EAAIsG,GAAWtG,IAAK,CAClC,IACM+G,EAAS,CACb9G,KAFWxB,IAGX0E,WAAY,CACV5B,QAAQ,IAGZxB,EAAInB,KAAKmI,GAGXD,EAAiBlI,KAAKmB,GAtFEqE,EAAS,CACnCpB,KAAMZ,EACNc,QAuFS4D,IAETE,KAIAC,KAEAC,OACC,IAEH,IAAMF,GAAe,WAKnB,IAJA,IAAMG,EAAgB/H,IAChBgE,GAAYkD,GAAY,GAAK,GAAOa,EAAc,GAAGlI,OAAS,GAAK,EACnEoE,GAAYsD,GAAY,GAAK,GAAOQ,EAAclI,OAAS,GAAK,EAE7Da,EAAI,EAAGA,EAAIqH,EAAclI,OAAQa,IACxC,IAAK,IAAIE,EAAI,EAAGA,EAAImH,EAAc,GAAGlI,OAAQe,IAAK,CAChD,IAAMoH,EAASD,EAAcrH,GAAGE,GAAGC,KACnC,GAAe,MAAXmH,EAAgB,CAClB,IAAIjE,EAAa,CACf5B,QAAQ,IAKD,IAANzB,GAAYE,GAAK,GAAKA,GAAK,IACrB,IAANF,GAAW,CAAC,EAAG,EAAG,GAAI,IAAIyD,SAASvD,IAC7B,IAANF,GAAYE,GAAK,GAAKA,GAAK,MAE5BmD,EAAW3B,UAAW,GAWxBuE,EAAQ/F,EAAIoD,EAAStD,EAAIuD,EAAS+D,EAAQjE,IAKhDkE,GAAiBjE,EAASC,IAGtBgE,GAAmB,SAACjE,EAASC,GAEjC,IAAK,IAAIvD,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAI5BgG,EAHkBhG,EAAIoD,EACJtD,EAAIuD,GACT,kBAAMiE,GAAmBlE,EAASC,EAAS,MAM5D,IAAK,IAAIvD,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,GAAIA,GAAK,GAAIA,IAAK,CAI7BgG,EAHkBhG,EAAIoD,EACJtD,EAAIuD,GACT,kBAAMiE,GAAmBlE,EAASC,EAAS,MAM5D,IAAK,IAAIvD,EAAI,GAAIA,GAAK,GAAIA,IACxB,IAAK,IAAIE,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAG5BgG,EAFkBhG,EAAIoD,EACJtD,EAAIuD,EACgBkE,MAKtCD,GAAqB,SAAClE,EAASC,EAASjD,GAC5CyF,EAAc2B,QAAUpH,EAlJP,SAACgD,EAASC,EAASC,GAAYc,EAAS,CACzDpB,KAAMT,EACNW,QAAS,CACPE,UACAC,UACAC,aA8IFmE,CAAWrE,EAASC,EAASjD,IAGzBmH,GAAoB,WACxBG,KACAjD,GAAgB,GAChBC,EAAgB8C,SAAU,EAC1BG,MAGID,GAAe,WAKnB,IAJA,IAAMP,EAAgB/H,IAChBgE,GAAYkD,GAAY,GAAK,GAAOa,EAAc,GAAGlI,OAAS,GAAK,EACnEoE,GAAYsD,GAAY,GAAK,GAAOQ,EAAclI,OAAS,GAAK,EAE7Da,EAAI,EAAGA,EAAIqH,EAAclI,OAAQa,IACxC,IAAK,IAAIE,EAAI,EAAGA,EAAImH,EAAc,GAAGlI,OAAQe,IAAK,CAEhD,GAAe,MADAmH,EAAcrH,GAAGE,GAAGC,KACf,CAClB,IAAM2H,EAAWnJ,IACjBsH,EAAQ/F,EAAIoD,EAAStD,EAAIuD,EAASuE,EAAU,CAAErG,QAAQ,EAAOE,iBAAawC,IAE5E+B,EAAgBhG,EAAIoD,EAAStD,EAAIuD,OAASY,KAK1C4D,IAAWvB,GAAY,GAAK,EAC5BwB,IAAWnB,GAAY,GAAK,EAE5BoB,GAAY,GACZC,GAAa,GAGbL,GAAgB,WACpBM,KACAC,KACAC,KACAC,GAAc,CAAEpI,EAAG6H,GAAS/H,EAAGgI,KAG/BnC,EAAY6B,QAAUa,aAAY,WAC5B3D,EAAgB8C,UAClBc,KACAC,QAED,MAGCN,GAAkB,WAItB,IAJ6B,IACtBO,EAAWX,GAAUE,GAAjBU,EAA4BZ,GAAUE,GAC1CW,EAAWZ,GAAUE,GAAjBW,EAA6Bb,GAAUE,GAEzClI,EAAI4I,EAAI5I,GAAK6I,EAAI7I,IACxB,IAAK,IAAIE,EAAIwI,EAAIxI,GAAKyI,EAAIzI,IACpBF,IAAM4I,GAAM5I,IAAM6I,EACpB5C,EAAQ/F,EAAGF,EAAG,IAAK,CAAEyB,QAAQ,IACpBvB,IAAMwI,GAAMxI,IAAMyI,GAC3B1C,EAAQ/F,EAAGF,EAAG,IAAK,CAAEyB,QAAQ,KAO/BqH,GADiBd,GAAUE,GACA,EAC3Ba,GAAchB,GAAO,EACrBiB,GAAejB,GAAO,EAEtBK,GAAkB,WAKtB,IAL6B,IACtBQ,EAAWE,GAAU,EAAjBD,EAAoBC,GAEzBG,EAAO5I,EAAoB,GAExBL,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMgJ,EAAWD,EAAKjJ,GAAGE,GACR,MAAbgJ,GACFjD,EAAQ/F,EAAI6I,GAAa/I,EAAI8I,GAAU,EAAGI,EAAU,CAAEzH,QAAQ,IAKpEwE,EAAQ8B,GAASa,EAAK,EAAG,SAAK,CAAEnH,QAAQ,IACxCwE,EAAQ8B,GAASc,EAAK,EAAG,SAAK,CAAEpH,QAAQ,IAExC,IAAK,IAAIzB,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMgJ,EAAWD,EAAKjJ,GAAGE,GACR,MAAbgJ,GACFjD,EAAQ/F,EAAI8I,GAAchJ,EAAI8I,GAAU,EAAGI,EAAU,CAAEzH,QAAQ,MAUvEsF,qBAAU,WACR,GAAiC,IAA7BlE,EAAMc,UAAUC,MAAME,IAEtBjB,EAAMc,UAAUC,MAAME,IAPP,EAO2B,CAM5C,IALA,IAAMqF,EAAYtG,EAAMc,UAAUC,MAAME,GAAK,EACvCsF,EAAYD,EAAY,EACxBE,EAAmBhJ,EAAoB8I,GACvCG,EAAmBjJ,EAAoB+I,GAEpCpJ,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMgJ,EAAWI,EAAiBtJ,GAAGE,GACjCgJ,IAAaG,EAAiBrJ,GAAGE,KAClB,MAAbgJ,EACFjD,EAAQ/F,EAAI6I,GAAa/I,EAAI8I,GAAU,EAAGnK,IAAsB,CAAE8C,QAAQ,IAE1EwE,EAAQ/F,EAAI6I,GAAa/I,EAAI8I,GAAU,EAAGI,EAAU,CAAEzH,QAAQ,KApBrD,IA0BboB,EAAMc,UAAUC,MAAME,KACxBa,GAAgB,GAChBC,EAAgB8C,SAAU,EAC1B6B,cAAc1D,EAAY6B,SAC1B8B,GAAkB,OAGrB,CAAC3G,EAAMc,UAAUC,MAAME,KAG1BiD,qBAAU,WACR,GAAiC,IAA7BlE,EAAMc,UAAUC,MAAMG,IAEtBlB,EAAMc,UAAUC,MAAMG,IAvCP,EAuC2B,CAM5C,IALA,IAAMoF,EAAYtG,EAAMc,UAAUC,MAAMG,GAAK,EACvCqF,EAAYD,EAAY,EACxBE,EAAmBhJ,EAAoB8I,GACvCG,EAAmBjJ,EAAoB+I,GAEpCpJ,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMgJ,EAAWI,EAAiBtJ,GAAGE,GACjCgJ,IAAaG,EAAiBrJ,GAAGE,KAClB,MAAbgJ,EACFjD,EAAQ/F,EAAI8I,GAAchJ,EAAI8I,GAAU,EAAGnK,IAAsB,CAAE8C,QAAQ,IAE3EwE,EAAQ/F,EAAI8I,GAAchJ,EAAI8I,GAAU,EAAGI,EAAU,CAAEzH,QAAQ,KApDtD,IA0DboB,EAAMc,UAAUC,MAAMG,KACxBY,GAAgB,GAChBC,EAAgB8C,SAAU,EAC1B6B,cAAc1D,EAAY6B,SAC1B8B,GAAkB,OAGrB,CAAC3G,EAAMc,UAAUC,MAAMG,KAE1B,IAAMqD,GAAsB,WAC1BV,SAAS+C,iBAAiB,SAAS,SAACC,GAC7B9E,EAAgB8C,SAEjB5B,EAAUrC,SAASiG,EAAEC,QACvB3D,EAAW0B,QAAQgC,EAAEC,OAAQ,MAIjCjD,SAAS+C,iBAAiB,WAAW,SAACC,GACpC,GAAK9E,EAAgB8C,SAEjB5B,EAAUrC,SAASiG,EAAEC,MACvB,OAAOD,EAAEC,MACP,IAAK,OACH3D,EAAW0B,QAAQkC,MAAO,EAC1B5D,EAAW0B,QAAQmC,MAAO,EAC1B,MACF,IAAK,OACH7D,EAAW0B,QAAQkC,MAAO,EAC1B5D,EAAW0B,QAAQmC,MAAO,EAC1B,MACF,IAAK,UACH7D,EAAW0B,QAAQoC,SAAU,EAC7B9D,EAAW0B,QAAQqC,WAAY,EAC/B,MACF,IAAK,YACH/D,EAAW0B,QAAQoC,SAAU,EAC7B9D,EAAW0B,QAAQqC,WAAY,OAWnC1B,GAAe,WAInB,IAAM2B,EAAYjC,GAAUE,GAAY,EACxChC,EAAQ+D,EAAWhC,GAAU,EAAwB,SAAK,CAAEvG,QAAQ,IACpEwE,EAAQ+D,EAAWhC,GAAS,SAAK,CAAEvG,QAAQ,IAC3CwE,EAAQ+D,EAAWhC,GAAU,EAAwB,SAAK,CAAEvG,QAAQ,IACpE+C,EAAkBwD,IAIlB,IAAMiC,EAAYlC,GAAUE,GAAY,EACxChC,EAAQgE,EAAWjC,GAAU,EAAwB,SAAK,CAAEvG,QAAQ,IACpEwE,EAAQgE,EAAWjC,GAAS,SAAK,CAAEvG,QAAQ,IAC3CwE,EAAQgE,EAAWjC,GAAU,EAAwB,SAAK,CAAEvG,QAAQ,IACpEgD,EAAkBuD,KAGdkC,GAAe,SAACrG,GACpB,IAAMsG,EAAqB,IAAXtG,EAAekE,GAAUE,GAAY,EAAIF,GAAUE,GAAY,EAE/E,GAAe,IAAXpE,GAEF,GADoB4B,EAAgBiC,SAAWQ,IAAkBzC,EAAgBiC,UAAW,GAE1FjC,EAAgBiC,QAAU/B,EAAgB+B,aAI1C,GAFoB/B,EAAgB+B,UAAYjC,EAAgBiC,QAE/C,CAAC,IACT0C,EAAapC,GAAUrC,EAAgB+B,QAAjC2C,EAA0CrC,GAAUvC,EAAgBiC,QAEjFzB,EAAQkE,EAASC,EAAO,EAAGzL,IAAsB,CAAE8C,QAAQ,EAAOI,UAAU,IAC5EoE,EAAQkE,EAASC,EAAMzL,IAAsB,CAAE8C,QAAQ,EAAOI,UAAU,IACxEoE,EAAQkE,EAASC,EAAO,EAAGzL,IAAsB,CAAE8C,QAAQ,EAAOI,UAAU,IAE5EoE,EAAQkE,EAASE,EAAK,EAAG,SAAK,CAAE5I,QAAQ,EAAMI,UAAU,IACxDoE,EAAQkE,EAASE,EAAI,SAAK,CAAE5I,QAAQ,EAAMI,UAAU,IACpDoE,EAAQkE,EAASE,EAAK,EAAG,SAAK,CAAE5I,QAAQ,EAAMI,UAAU,IAExD8D,EAAgB+B,QAAUjC,EAAgBiC,cAGzC,GAAe,IAAX7D,EAAc,CAGvB,GAFoB6B,EAAgBgC,SAAWQ,IAAkBxC,EAAgBgC,UAAW,GAG1FhC,EAAgBgC,QAAU9B,EAAgB8B,aAI1C,GAFoB9B,EAAgB8B,UAAYhC,EAAgBgC,QAE/C,CAAC,IACT0C,EAAapC,GAAUpC,EAAgB8B,QAAjC2C,EAA0CrC,GAAUtC,EAAgBgC,QAEjFzB,EAAQkE,EAASC,EAAO,EAAGzL,IAAsB,CAAE8C,QAAQ,EAAOI,UAAU,IAC5EoE,EAAQkE,EAASC,EAAMzL,IAAsB,CAAE8C,QAAQ,EAAOI,UAAU,IACxEoE,EAAQkE,EAASC,EAAO,EAAGzL,IAAsB,CAAE8C,QAAQ,EAAOI,UAAU,IAE5EoE,EAAQkE,EAASE,EAAK,EAAG,SAAK,CAAE5I,QAAQ,EAAMI,UAAU,IACxDoE,EAAQkE,EAASE,EAAI,SAAK,CAAE5I,QAAQ,EAAMI,UAAU,IACpDoE,EAAQkE,EAASE,EAAK,EAAG,SAAK,CAAE5I,QAAQ,EAAMI,UAAU,IAExD+D,EAAgB8B,QAAUhC,EAAgBgC,WAM5CY,GAAgB,SAAC,GAAc,IAAZpI,EAAW,EAAXA,EAAGF,EAAQ,EAARA,EAS1BiG,EAAQjH,KAAKC,MAAMuG,EAAgBkC,QAAQxH,GAAIlB,KAAKC,MAAMuG,EAAgBkC,QAAQ1H,GAAIrB,IARhE,CACpB8C,QAAQ,EACRG,QAAQ,IAONgD,EAAgB8C,UAClBpC,EAAgB,CAAEpF,IAAGF,MACrBwF,EAAgBkC,QAAU,CAAExH,IAAGF,KAC/BiG,EAAQjH,KAAKC,MAAMiB,GAAIlB,KAAKC,MAAMe,GAAI,SARnB,CACnByB,QAAQ,EACRG,QAAQ,MAUN4G,GAAqB,WAAM,IAExB8B,EACL9E,EAAgBkC,QAAQxH,EAlQV,EAkQeqF,EAAiBmC,QAAQxH,EAD1CqK,EAEZ/E,EAAgBkC,QAAQ1H,EAnQV,EAmQeuF,EAAiBmC,QAAQ1H,EAGpDwK,EAAU,CAAEtK,EAAGoK,EAAOtK,EAAGuK,GAKvBE,EAAgB,GAEf/B,EAAWX,GAAUE,GAAY,EAA7BU,EAAgCZ,GAAUE,GAAY,EAC1DyC,EAAmC1C,GAAUvC,EAAgBiC,QAA7CiD,EAAsD3C,GAAUtC,EAAgBgC,QAEvG,GACG1I,KAAKC,MAAMqL,IAAU5B,GAAO1J,KAAKC,MAAMsL,IAAUG,EAAiB,EAAID,GAAiBzL,KAAKC,MAAMsL,IAAUG,EAAiB,EAAID,GAEjIzL,KAAKC,MAAMqL,IAAU3B,GAAO3J,KAAKC,MAAMsL,IAAUI,EAAiB,EAAIF,GAAiBzL,KAAKC,MAAMsL,IAAUI,EAAiB,EAAIF,EAClI,CACA,IAAMG,EAAe5L,KAAKC,MAAMqL,IAAUvC,GAAUE,GAAY,EAAIyC,EAAiBC,EAC/EE,EAASC,GAAoBP,EAAOK,GAAerF,EAAiBmC,QAAQxH,GAElFsK,EAAQtK,EAAIsF,EAAgBkC,QAAQxH,EAxRtB,EAwR2B2K,EAAO3K,EAChDsK,EAAQxK,EAAIwF,EAAgBkC,QAAQ1H,EAzRtB,EAyR2B6K,EAAO7K,EAChDoF,EAAiByF,GACjBtF,EAAiBmC,QAAUmD,OAG3B,GAAI7L,KAAKC,MAAMqL,IAAUvC,GAAUE,IAAajJ,KAAKC,MAAMqL,IAAUvC,GAAUE,GAAW,CAExF3C,EADAkF,EAAU,CAAEtK,EAAG6H,GAAS/H,EAAGgI,KAE3B,IAAM+C,EAAqBlG,IAC3BO,EAAiB2F,GACjBxF,EAAiBmC,QAAUqD,EACvB/L,KAAKC,MAAMqL,IAAUvC,GAAUE,GACjC9B,EAAe,GAEfA,EAAe,GAOrB,GAAInH,KAAKC,MAAMsL,IAAUvC,GAAUE,IAAclJ,KAAKC,MAAMsL,IAAUvC,GAAUE,GAAY,CAC1FsC,EAAQxK,EAAIwF,EAAgBkC,QAAQ1H,EA/StB,GA+S4BuF,EAAiBmC,QAAQ1H,EACnE,IAAMgL,EAAa,CAAE9K,EAAGqF,EAAiBmC,QAAQxH,EAAGF,GAAIuF,EAAiBmC,QAAQ1H,GACjFoF,EAAiB4F,GACjBzF,EAAiBmC,QAAUsD,EAK7B1C,GAAckC,IAGVM,GAAsB,SAACG,EAAOL,EAAcM,GAGhD,IACIC,GADWF,EAAQL,GAAgB,IAClB5L,KAAKoM,GAEpBC,EAAiBrM,KAAKoM,GAAK,IAE7BpM,KAAKsM,IAAIH,IAAUE,IACrBF,EAAQA,EAAQ,EAAIE,GAAkBA,GAGxC,IAAMnL,EAAIgL,EAAOlM,KAAKsM,IAAIJ,GAAQlM,KAAKuM,IAAIvM,KAAKsM,IAAIH,IAC9CnG,EAAYhG,KAAKiG,KAAK,EAAIjG,KAAKkG,IAAIhF,EAAG,IAE5C,MAAO,CAAEF,EAAGmL,EAAQnM,KAAKsM,IAAIH,GAASnG,EAAW9E,EAAGA,EAAI8E,IAGpDyD,GAAwB,WAQ5B,GANIzC,EAAW0B,QAAQkC,KACrBnE,EAAgBiC,UACP1B,EAAW0B,QAAQmC,MAC5BpE,EAAgBiC,UAElBwC,GAAa,GACiB,IAA1BnE,EAAc2B,QAEZ1B,EAAW0B,QAAQoC,QACrBpE,EAAgBgC,UACP1B,EAAW0B,QAAQqC,WAC5BrE,EAAgBgC,UAElBwC,GAAa,OACR,CAIL,GAFelL,KAAKE,SAAW,IAKzBsG,EAAgBkC,QAAQ1H,EAAIgI,GAAUpC,EAAgB8B,QACxDhC,EAAgBgC,UACPlC,EAAgBkC,QAAQ1H,EAAIgI,GAAUpC,EAAgB8B,SAC/DhC,EAAgBgC,cAEb,CAEL,IAAM8D,EAA2B,EAAhBxM,KAAKE,SAAgB,EAClCsM,EAAU,IACZ9F,EAAgBgC,UACP8D,GAAW,KACpB9F,EAAgBgC,UAGpBwC,GAAa,KAIXV,GAAoB,SAAC9I,GAKzB,IAJA,IAAM+K,EAAgBhL,EAAgBC,GAChC4C,GAAYkD,GAAY,GAAK,GAAOiF,EAAc,GAAGtM,OAAS,GAAK,EACnEoE,GAAYsD,GAAY,GAAK,GAAO4E,EAActM,OAAS,GAAK,EAE7Da,EAAI,EAAGA,EAAIyL,EAActM,OAAQa,IACxC,IAAK,IAAIE,EAAI,EAAGA,EAAIuL,EAAc,GAAGtM,OAAQe,IAAK,CAChD,IAAMoH,EAASmE,EAAczL,GAAGE,GAAGC,KACnC,GAAe,MAAXmH,EAAgB,CAKlBrB,EAAQ/F,EAAIoD,EAAStD,EAAIuD,EAAS+D,EAJjB,CACf7F,QAAQ,KAQhBiK,MAGIC,GAAqB,WACzBC,KACAC,KACAC,KACA1F,KACA2F,KACA7E,MAGIwE,GAA4B,WAGhC,IAAK,IAAI1L,EAAIgI,GAAU,EAAGhI,GAAKgI,GAAU,EAAGhI,IAE1C,IAAK,IAAIE,EAAI6H,GAAU,GAAI7H,GAAK6H,GAAU,GAAI7H,IAC5CgG,EAAgBhG,EAAGF,EAAG2L,KAKtBC,GAAqB,WAKzB,IAJA,IAAMH,EAAgBhL,EAAgB,GAChC6C,GAAYkD,GAAY,GAAK,GAAOiF,EAAc,GAAGtM,OAAS,GAAK,EACnEoE,GAAYsD,GAAY,GAAK,GAAO4E,EAActM,OAAS,GAAK,EAE7Da,EAAI,EAAGA,EAAIyL,EAActM,OAAQa,IACxC,IAAK,IAAIE,EAAI,EAAGA,EAAIuL,EAAc,GAAGtM,OAAQe,IAAK,CAEhD,GAAe,MADAuL,EAAczL,GAAGE,GAAGC,KACf,CAClB,IAAIkD,EAAa,CACf5B,QAAQ,EACRE,iBAAawC,GAGf8B,EAAQ/F,EAAIoD,EAAStD,EAAIuD,EAAS5E,IAAsB0E,MAM1DwI,GAAkB,WAItB,IAJ6B,IACtBnD,EAAWX,GAAUE,GAAjBU,EAA4BZ,GAAUE,GAC1CW,EAAWZ,GAAUE,GAAjBW,EAA6Bb,GAAUE,GAEzClI,EAAI4I,EAAI5I,GAAK6I,EAAI7I,IACxB,IAAK,IAAIE,EAAIwI,EAAIxI,GAAKyI,EAAIzI,IACpBF,IAAM4I,GAAM5I,IAAM6I,EACpB5C,EAAQ/F,EAAGF,EAAGrB,IAAsB,CAAE8C,QAAQ,IACrCvB,IAAMwI,GAAMxI,IAAMyI,GAC3B1C,EAAQ/F,EAAGF,EAAGrB,IAAsB,CAAE8C,QAAQ,KAMhDqK,GAAa,WAMjB,IANwB,IACjBlD,EAAWE,GAAU,EAAjBD,EAAoBC,GAGzBkD,EAAYnJ,EAAMc,UAAUC,MAAME,GAClCmI,EAAkB5L,EAAoB2L,GACnChM,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAET,MADA+L,EAAgBjM,GAAGE,IAElC+F,EAAQ/F,EAAI6I,GAAa/I,EAAI8I,GAAU,EAAGnK,IAAsB,CAAE8C,QAAQ,IAMhFwE,EAAQ8B,GAASa,EAAK,EAAGjK,IAAsB,CAAE8C,QAAQ,IACzDwE,EAAQ8B,GAASc,EAAK,EAAGlK,IAAsB,CAAE8C,QAAQ,IAKzD,IAFA,IAAMyK,EAAarJ,EAAMc,UAAUC,MAAMG,GACnCoI,EAAmB9L,EAAoB6L,GACpClM,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAET,MADAiM,EAAiBnM,GAAGE,IAEnC+F,EAAQ/F,EAAI8I,GAAchJ,EAAI8I,GAAU,EAAGnK,IAAsB,CAAE8C,QAAQ,MAM7EsK,GAAe,WACnB,IAAMK,EAAWrE,GAAUE,GAAY,EACjCoE,EAAWrE,GAAUvC,EAAgBiC,QAC3CzB,EAAQmG,EAAUC,EAAW,EAAG1N,IAAsB,CAAE8C,QAAQ,IAChEwE,EAAQmG,EAAUC,EAAU1N,IAAsB,CAAE8C,QAAQ,IAC5DwE,EAAQmG,EAAUC,EAAW,EAAG1N,IAAsB,CAAE8C,QAAQ,IAEhE,IAAM6K,EAAWvE,GAAUE,GAAY,EACjCsE,EAAWvE,GAAUtC,EAAgBgC,QAC3CzB,EAAQqG,EAAUC,EAAW,EAAG5N,IAAsB,CAAE8C,QAAQ,IAChEwE,EAAQqG,EAAUC,EAAU5N,IAAsB,CAAE8C,QAAQ,IAC5DwE,EAAQqG,EAAUC,EAAW,EAAG5N,IAAsB,CAAE8C,QAAQ,KA+J5D0F,GAAkB,WAMtB,IALA,IAAMqF,EAAmB1L,IAEnBwC,GAAYkD,GAAY,GAAK,GAAOgG,EAAiB,GAAGrN,OAAS,GAAK,EACtEoE,EAAYsD,GAAY,GAAQ2F,EAAiBrN,OAAS,GAEvDa,EAAI,EAAGA,EAAIwM,EAAiBrN,OAAQa,IAC3C,IAAK,IAAIE,EAAI,EAAGA,EAAIsM,EAAiB,GAAGrN,OAAQe,IAAK,CACnD,IAAMoH,EAASkF,EAAiBxM,GAAGE,GAAGC,KACtC,GAAe,MAAXmH,EAAgB,CAKlBrB,EAAQ/F,EAAIoD,EAAStD,EAAIuD,EAAS+D,EAJjB,CACf7F,QAAQ,OASlB,OACE,sBAAKO,UAAU,MAAMC,IAAKsE,GAA1B,UACE,oBAAIvE,UAAU,OAAd,SACGa,EAAMM,WAAWtD,KAAI,SAACI,EAAKwM,GAC1B,OACE,oBAAIzK,UAAS,cAASyK,GAAtB,SACGxM,EAAIJ,KAAI,SAAC6M,EAAMC,GACd,OACE,cAAC,EAAD,CACExM,KAAMuM,EAAKvM,KACXsB,OAAQiL,EAAKrJ,WAAW5B,OACxBC,SAAUgL,EAAKrJ,WAAW3B,SAC1BC,YAAa+K,EAAKrJ,WAAW1B,YAE7BC,OAAQ8K,EAAKrJ,WAAWzB,OACxBC,SAAU6K,EAAKrJ,WAAWxB,UAP5B,UAKU4K,EALV,YAKkBE,QARxB,cAA0CF,SAxDhDG,UACAC,UAAUC,UAAWC,UAASC,cCx9BpCC,IAASC,OACP,cAAC,EAAD,IACAxG,SAASyG,eAAe,W","file":"static/js/main.674166d8.chunk.js","sourcesContent":["export const getRandomAsciiChar = () => {\n  // 33 to 165\n  // NOT 127\n  const validNums = [];\n  // Kinda normal chars\n  for (let i = 33; i <= 255; i++) {\n    if (i < 127 || i > 160) {\n      validNums.push(i);\n    }\n  }\n\n  const randIdx = Math.round(Math.random() * validNums.length);\n  const randNum = validNums[randIdx]\n  return String.fromCharCode(randNum);\n}\n\nexport const getAllAsciiChar = () => {\n  const validNums = [];\n  for (let i = 33; i <= 255; i++) {\n    if (i < 127 || i > 160) {\n      validNums.push(i);\n    }\n  }\n\n  return validNums.map((code) => String.fromCharCode(code));\n}\n\n\n\nexport const getLanding = (docHeight, docWidth) => {\n  const landingChar = `\n    <section>----------------------------\n    |                                   |\n    |                                   |\n    |        <h1>ASCII Pong</h1>        |\n    |                                   |\n    |                                   |\n    |                                   |\n    |  <option>------   <option>------  |\n    |  |     1P     |   |     2P     |  |\n    |  -----</option>   -----</option>  |\n    |                                   |\n    |                                   |\n    |        <button>-----------        |\n    |        |      Start      |        |\n    |        ----------</button>        |\n    |                                   |\n    |                                   |\n    |                                   |\n    ---------------------------</section>`;\n\n  let landingLines = landingChar\n    .split(\"\\n\")\n    .filter((line) => line !== \"\")\n    .map((line) => line.trim());\n\n  let formattedLines = [];\n  \n  // Assign char to matrix\n  for(let y = 0; y < landingLines.length; y++) {\n    const row = [];\n\n    for(let x = 0; x < landingLines[0].length; x++) {\n      row.push({ char: landingLines[y][x] });\n    };\n\n    formattedLines.push(row);\n  }\n\n  // Assign property to char in matrix, e.g. hover animation/bold\n  \n  return formattedLines;\n}\n\n// Imitate 7 Segment display\nconst displayNumArr = [\n`\n ███ \n█   █\n█   █\n█   █\n ███ `,\n`\n    █\n    █\n    █\n    █\n    █`,\n`\n█████\n    █\n█████\n█    \n█████`,\n`\n█████\n    █\n█████\n    █\n█████`,\n`\n█   █\n█   █\n█████\n    █\n    █`,\n`\n█████\n█    \n█████\n    █\n█████`,\n`\n█████\n█    \n█████\n█   █\n█████`,\n`\n█████\n    █\n    █\n    █\n    █`,\n`\n█████\n█   █\n█████\n█   █\n█████`,\n`\n█████\n█   █\n█████\n    █\n█████`\n];\n\nexport const getDisplayNumMatrix = (num) => {\n  // Can't be greater than 7 (score limit)\n  // so this method works\n  return displayNumArr[num].split(\"\\n\").filter((el) => el !== \"\").map((str) => str.split(\"\")); \n}\n\nexport const getWinningBoard = (winner) => {\n  const displayWinner = `P${winner}`;\n  const winningChars = `\n    <section>------------------------------------------\n    |                                                 |\n    |                                                 |\n    |        <h1>Congratulations, ${displayWinner} won!</h1>        |\n    |                                                 |\n    |                                                 |\n    |                                                 |\n    |                                                 |\n    |            <button>----------------             |\n    |            |      Main Menu       |             |\n    |            ---------------</button>             |\n    |                                                 |\n    |                                                 |\n    |                                                 |\n    -----------------------------------------</section>`\n\n  let winningLines = winningChars\n    .split(\"\\n\")\n    .filter((line) => line !== \"\")\n    .map((line) => line.trim());\n\n  let formattedWinningLines = [];\n  \n  // Assign char to matrix\n  for(let y = 0; y < winningLines.length; y++) {\n    const row = [];\n\n    for(let x = 0; x < winningLines[0].length; x++) {\n      row.push({ char: winningLines[y][x] });\n    };\n\n    formattedWinningLines.push(row);\n  }\n\n  return formattedWinningLines;\n}\n\nexport const getDisclaimer = () => {\n  // 90 x 24\n  const disclaimerStr = `\n    <footer>-----------------------------------------------------------------------------------\n    | <h2>Controls & Disclaimer</h2>                                                          |\n    | <p>                                                                                     |\n    |    P1 uses W & S, P2 uses ↑ & ↓. Winning score is 7. Game is not designed for small     |\n    |    screens. Game performance may suffer on low spec systems. Batteries not included.    |\n    | </p>                                                                                    |\n    ----------------------------------------------------------------------------------</footer>`;\n\n  let disclaimerLines = disclaimerStr\n    .split(\"\\n\")\n    .filter((line) => line !== \"\")\n    .map((line) => line.trim());\n\n  let formattedDisclaimerLines = [];\n  \n  // Assign char to matrix\n  for(let y = 0; y < disclaimerLines.length; y++) {\n    const row = [];\n\n    for(let x = 0; x < disclaimerLines[0].length; x++) {\n      row.push({ char: disclaimerLines[y][x] });\n    };\n\n    formattedDisclaimerLines.push(row);\n  }\n\n  return formattedDisclaimerLines;\n};\n\nexport const getColorThemeToggle = () => {\n  const colorThemeStr = `\n    <aside>--------------------------\n    |                               |\n    |      <h2>Color Theme</h2>     |\n    |                               |\n    | <button>------ <button>------ |\n    | |Simple White| |Matrix Green| |\n    | -----</button> -----</button> |\n    -------------------------</aside>`;\n\n  let colorThemeLines = colorThemeStr\n    .split(\"\\n\")\n    .filter((line) => line !== \"\")\n    .map((line) => line.trim());\n\n  let formattedColorThemeLines = [];\n  \n  // Assign char to matrix\n  for(let y = 0; y < colorThemeLines.length; y++) {\n    const row = [];\n\n    for(let x = 0; x < colorThemeLines[0].length; x++) {\n      row.push({ char: colorThemeLines[y][x] });\n    };\n\n    formattedColorThemeLines.push(row);\n  }\n\n  return formattedColorThemeLines;\n}\n  \nwindow.getLanding = getLanding;\nwindow.getNum = getDisplayNumMatrix;\nwindow.getWin = getWinningBoard;\nwindow.disclaimer = getDisclaimer;\nwindow.color = getColorThemeToggle;\n// Useful:\n/*\n  Full Block: 9608\n  Smol block: 9642\n  Left Triangle: 9664\n  Triangles: 9698, 9699, 9700, 9701\n  Circle: 9679\n*/","import React from 'react';\n\nconst CenterTile = () => {\n  return (\n    <div className=\"center-tile\">\n      :\n    </div>\n  )\n}\n\nconst MemoizedCenterTile = React.memo(CenterTile);\n\nexport default MemoizedCenterTile;","import React, { useEffect, useRef } from 'react';\n\nconst CharTile = ({\n  char,\n  active,\n  selected,\n  handleClick,\n  isBall,\n  isPaddle\n}) => {\n  const tileRef = useRef();\n  // TODO: Add fade in animation at the start\n  // console.log(\"RENDER: \", char);\n\n  return (\n    <div\n      className={`\n        char-tile\n        ${active ? 'active' : ''}\n        ${selected ? 'selected' : ''}\n        ${handleClick ? 'is-clickable' : ''}\n        ${isBall ? 'ball' : ''}\n        ${isPaddle ? 'paddle' : ''}\n      `}\n      ref={tileRef}\n      onClick={handleClick}\n    >\n      {char}\n    </div>\n  )\n}\n\nconst MemoizedCharTile = React.memo(CharTile);\n\nexport default MemoizedCharTile;\n","import React, { useEffect, useReducer, useRef, useState } from 'react';\nimport { getAllAsciiChar, getDisclaimer, getDisplayNumMatrix, getLanding, getRandomAsciiChar, getWinningBoard, getColorThemeToggle } from '../util/util';\nimport CenterTile from './CenterTile';\nimport CharTile from './CharTile';\nimport HorizontalWall from './HorizontalWall';\nimport VerticalWall from './VerticalWall';\n\nconst SET_TILES = \"SETTILES\";\nconst SET_TILE = \"SETTILE\";\nconst SET_CLICK_HANDLER = \"SETCLICKHANDLER\";\nconst SET_PLAYERS = \"SETPLAYERS\";\nconst INCREMENT_SCORE = \"INCREMENTSCORE\";\nconst RESET_SCORE = \"RESETSCORE\";\n\nconst reducer = (state, action) => {\n  let nextState = Object.assign({}, state);\n\n  let x;\n  let y;\n\n  switch (action.type) {\n    case SET_TILES:\n      nextState.tileMatrix = action.payload;\n      return nextState;\n    case SET_TILE:\n      x = action.payload.x;\n      y = action.payload.y;\n      const { char, properties } = action.payload;\n      nextState.tileMatrix[y][x].char = char;\n      nextState.tileMatrix[y][x].properties = properties;\n      return nextState;\n    case SET_CLICK_HANDLER:\n      x = action.payload.x;\n      y = action.payload.y;\n      const { handleClick } = action.payload;\n      nextState.tileMatrix[y][x].properties.handleClick = handleClick;\n      return nextState;\n    case SET_PLAYERS:\n      const { offsetX, offsetY } = action.payload;\n      nextState.players = action.payload.players;\n      if (nextState.players === 1) {\n        // 1P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 3; x <= 16; x++) {\n            if (y === 8) {\n              if ([3, 9, 10, 16].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n            }\n          };\n        };\n\n        // 2P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 20; x <= 33; x++) {\n            if (y === 8) {\n              if ([20, 26, 27, 33].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n            }\n          };\n        };\n      } else {\n        // 1P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 3; x <= 16; x++) {\n            if (y === 8) {\n              if ([3, 9, 10, 16].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n            }\n          };\n        };\n\n        // 2P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 20; x <= 33; x++) {\n            if (y === 8) {\n              if ([20, 26, 27, 33].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n            }\n          };\n        };\n      }\n      return nextState;\n    case INCREMENT_SCORE:\n      const oldScore = state.gameState.score[`p${action.payload.player}`];\n      nextState.gameState.score[`p${action.payload.player}`] = oldScore + action.payload.score;\n      return nextState;\n    case RESET_SCORE:\n      nextState.gameState.score.p1 = 0;\n      nextState.gameState.score.p2 = 0;\n      return nextState;\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  tileMatrix: [],\n  players: 1,\n  // Add logic for game state change\n  gameState: {\n    landing: true,\n    game: false,\n    winner: undefined,\n    score: {\n      p1: 0,\n      p2: 0\n    }\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [p1PaddleCenter, setP1PaddleCenter] = useState();\n  const [p2PaddleCenter, setP2PaddleCenter] = useState();\n\n  const [isGameActive, setIsGameActive] = useState(false);\n  const isGameActiveRef = useRef(isGameActive);\n\n  const xDirThreshold = 0.5;\n\n  const getRandomUnitDirectionVector = () => {\n    // X can't be less than something;\n    const x = Math.random() * (1 - xDirThreshold) + xDirThreshold;\n    const y = Math.random();\n    const xCoeff = Math.round(Math.random()) === 0 ? -1 : 1;\n    const yCoeff = Math.round(Math.random()) === 0 ? -1 : 1;\n    const magnitude = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n    return { x: xCoeff * x / magnitude, y: yCoeff * y / magnitude };\n  }\n\n  const [ballDirection, setBallDirection] = useState(getRandomUnitDirectionVector());\n\n  const [ballPosition, setBallPosition] = useState({ x: 0, y: 0 });\n  const ballDirectionRef = useRef(ballDirection);\n  const ballPositionRef = useRef(ballPosition);\n\n  const paddle1YDiffRef = useRef(0);\n  const paddle2YDiffRef = useRef(0);\n\n  const paddle1PrevYRef = useRef(0);\n  const paddle2PrevYRef = useRef(0);\n\n  const gameTickRef = useRef();\n  \n  const validKeys = [\"KeyW\", \"KeyS\", \"ArrowUp\", \"ArrowDown\"];\n\n  const numPlayersRef = useRef(1);\n\n  const keyDownRef = useRef({\n    \"KeyW\": false,\n    \"KeyS\": false,\n    \"ArrowUp\": false,\n    \"ArrowDown\": false\n  });\n\n  const setTiles = (tiles) => dispatch({\n    type: SET_TILES,\n    payload: tiles\n  });\n  \n  const setTile = (x, y, char, properties) => dispatch({\n    type: SET_TILE,\n    payload: {\n      x,\n      y,\n      char,\n      properties,\n    }\n  });\n  \n  const setClickHandler = (x, y, handleClick) => dispatch({\n    type: SET_CLICK_HANDLER,\n    payload: {\n      x,\n      y,\n      handleClick\n    }\n  });\n  \n  const setPlayers = (offsetX, offsetY, players) => dispatch({\n    type: SET_PLAYERS,\n    payload: {\n      offsetX,\n      offsetY,\n      players\n    },\n  });\n  \n  const incrementScore = (player) => dispatch({\n    type: INCREMENT_SCORE,\n    payload: {\n      player,\n      score: 1\n    }\n  });\n  \n  const resetScores = () => dispatch({\n    type: RESET_SCORE\n  });\n  \n  window.increment = incrementScore;\n  window.reset = resetScores;\n  \n  window.setTile = setTile;  \n\n  // Font Height: 19px, Width: 8.8px;\n  const appRef = useRef();\n\n  const [tileHeight, tileWidth] = [19, 9];\n\n  // Size of box = 19px 9px\n  let numXTiles = Math.floor(document.body.clientWidth / tileWidth);\n  let numYTiles = Math.floor(document.body.clientHeight / tileHeight);\n\n  // Ensure always odd num\n  if (numXTiles % 2 === 0) {\n    numXTiles--;\n  };\n\n  if (numYTiles % 2 === 0) {\n    numYTiles--;\n  };\n  \n  // Mounted\n  useEffect(() => {\n    const initialRefMatrix = [];\n    \n    for (let y = 0; y < numYTiles; y++) {\n      const row = [];\n\n      for (let x = 0; x < numXTiles; x++) {\n        const char = getRandomAsciiChar();\n        const refObj = {\n          char,\n          properties: {\n            active: false\n          }\n        }\n        row.push(refObj)\n      }\n\n      initialRefMatrix.push(row);\n    };\n\n    setTiles(initialRefMatrix);\n\n    setupLanding();\n\n    // setupColorThemeToggle();\n\n    setupDisclaimer();\n\n    setupPlayerKeybinds();\n  }, []);\n\n  const setupLanding = () => {\n    const landingMatrix = getLanding();\n    const offsetX = ((numXTiles - 1) / 2) - ((landingMatrix[0].length - 1) / 2);\n    const offsetY = ((numYTiles - 1) / 2) - ((landingMatrix.length - 1) / 2);\n    \n    for (let y = 0; y < landingMatrix.length; y++) {\n      for (let x = 0; x < landingMatrix[0].length; x++) {\n        const currEl = landingMatrix[y][x].char;\n        if (currEl !== \" \") {\n          let properties = {\n            active: true\n          };\n\n          // Default 1P\n          if (\n            (y === 7 && (x >= 3 && x <= 16)) ||\n            (y === 8 && [3, 9, 10, 16].includes(x)) ||\n            (y === 9 && (x >= 3 && x <= 16))\n          ) {\n            properties.selected = true;\n          };\n          \n          // // Default 2P\n          // if (\n          //   (y === 7 && (x >= 20 && x <= 33)) ||\n          //   (y === 8 && [20, 26, 27, 33].includes(x)) ||\n          //   (y === 9 && (x >= 20 && x <= 33))\n          // ) {\n          //   properties.selected = true;\n          // };\n          setTile(x + offsetX, y + offsetY, currEl, properties);\n        };\n      };\n    };\n\n    setupClickEvents(offsetX, offsetY);\n  }\n\n  const setupClickEvents = (offsetX, offsetY) => {\n    // 1P\n    for (let y = 7; y <= 9; y++) {\n      for (let x = 3; x <= 16; x++) {\n        const adjustedX = x + offsetX;\n        const adjustedY = y + offsetY;\n        const oneP = () => setPlayersCallback(offsetX, offsetY, 1);\n        setClickHandler(adjustedX, adjustedY, oneP);\n      };\n    };\n\n    // 2P\n    for (let y = 7; y <= 9; y++) {\n      for (let x = 20; x <= 33; x++) {\n        const adjustedX = x + offsetX;\n        const adjustedY = y + offsetY;\n        const twoP = () => setPlayersCallback(offsetX, offsetY, 2);\n        setClickHandler(adjustedX, adjustedY, twoP);\n      };\n    };\n\n    // Start\n    for (let y = 12; y <= 14; y++) {\n      for (let x = 9; x <= 27; x++) {\n        const adjustedX = x + offsetX;\n        const adjustedY = y + offsetY;\n        setClickHandler(adjustedX, adjustedY, startGameCallback);\n      };\n    };\n  };\n\n  const setPlayersCallback = (offsetX, offsetY, num) => {\n    numPlayersRef.current = num;\n    setPlayers(offsetX, offsetY, num);\n  };\n\n  const startGameCallback = () => {\n    clearLanding();\n    setIsGameActive(true);\n    isGameActiveRef.current = true;\n    setupGameArea();\n  }\n\n  const clearLanding = () => {\n    const landingMatrix = getLanding();\n    const offsetX = ((numXTiles - 1) / 2) - ((landingMatrix[0].length - 1) / 2);\n    const offsetY = ((numYTiles - 1) / 2) - ((landingMatrix.length - 1) / 2);\n    \n    for (let y = 0; y < landingMatrix.length; y++) {\n      for (let x = 0; x < landingMatrix[0].length; x++) {\n        const currEl = landingMatrix[y][x].char;\n        if (currEl !== \" \") {\n          const randChar = getRandomAsciiChar();\n          setTile(x + offsetX, y + offsetY, randChar, { active: false, handleClick: undefined });\n        };\n        setClickHandler(x + offsetX, y + offsetY, undefined);\n      };\n    };\n  };\n  \n  const xCenter = (numXTiles - 1) / 2;\n  const yCenter = (numYTiles - 1) / 2;\n\n  const halfWidth = 45;\n  const halfHeight = 12;\n  const ballSpeed = 2;\n\n  const setupGameArea = () => {\n    setupGameBounds();\n    setupScoreBoard();\n    setupPaddles();\n    moveBallToPos({ x: xCenter, y: yCenter });\n\n    // Blistering fast 5 fps\n    gameTickRef.current = setInterval(() => {\n      if (isGameActiveRef.current) {\n        handleBallGameTick();\n        handlePaddlesGameTick();\n      }\n    }, 1000 / 5);\n  };\n\n  const setupGameBounds = () => {\n    const [x1, x2] = [xCenter - halfWidth, xCenter + halfWidth];\n    const [y1, y2] = [yCenter - halfHeight, yCenter + halfHeight];\n\n    for (let y = y1; y <= y2; y++) {\n      for (let x = x1; x <= x2; x++) {\n        if (y === y1 || y === y2) {\n          setTile(x, y, \"-\", { active: true })\n        } else if (x === x1 || x === x2) {\n          setTile(x, y, \"|\", { active: true });\n        }\n      }\n    };\n  };\n\n  const topOfGameBound = yCenter - halfHeight;\n  const yOffset = topOfGameBound - 2;\n  const xOffsetLeft = xCenter - (2 + 5);\n  const xOffsetRight = xCenter + (2 + 1);\n\n  const setupScoreBoard = () => {\n    const [y1, y2] = [yOffset - 4, yOffset];\n    // const [y1, y2] = [topOfGameBound - 1, topOfGameBound - 5];\n    const zero = getDisplayNumMatrix(0);\n    // Left bounds\n    for (let y = 0; y < 5; y++) {\n      for (let x = 0; x < 5; x++) {\n        const currChar = zero[y][x];\n        if (currChar !== \" \") {\n          setTile(x + xOffsetLeft, y + yOffset - 4, currChar, { active: true });\n        }\n      }\n    }\n    // Middle bounds\n    setTile(xCenter, y1 + 1, \"●\", { active: true });\n    setTile(xCenter, y2 - 1, \"●\", { active: true });\n    // Right bounds\n    for (let y = 0; y < 5; y++) {\n      for (let x = 0; x < 5; x++) {\n        const currChar = zero[y][x];\n        if (currChar !== \" \") {\n          setTile(x + xOffsetRight, y + yOffset - 4, currChar, { active: true });\n        }\n      }\n    }\n  }\n\n  const winningScore = 7;\n\n  // Not the most elegant solution to split them up\n\n  useEffect(() => {\n    if (state.gameState.score.p1 === 0) return;\n    \n    if (state.gameState.score.p1 <= winningScore) {\n      const prevScore = state.gameState.score.p1 - 1;\n      const currScore = prevScore + 1;\n      const prevScoreDisplay = getDisplayNumMatrix(prevScore);\n      const currScoreDisplay = getDisplayNumMatrix(currScore);\n      // Display num dimensions = 5x5\n      for (let y = 0; y < 5; y++) {\n        for (let x = 0; x < 5; x++) {\n          const currChar = currScoreDisplay[y][x];\n          if (currChar !== prevScoreDisplay[y][x]) {\n            if (currChar === \" \") {\n              setTile(x + xOffsetLeft, y + yOffset - 4, getRandomAsciiChar(), { active: false })\n            } else {\n              setTile(x + xOffsetLeft, y + yOffset - 4, currChar, { active: true })\n            }\n          }\n        }\n      }\n\n      if (state.gameState.score.p1 === winningScore) {\n        setIsGameActive(false);\n        isGameActiveRef.current = false;\n        clearInterval(gameTickRef.current);\n        showWinningScreen(1);\n      }\n    };\n  }, [state.gameState.score.p1]);\n\n  \n  useEffect(() => {\n    if (state.gameState.score.p2 === 0) return;\n    \n    if (state.gameState.score.p2 <= winningScore) {\n      const prevScore = state.gameState.score.p2 - 1;\n      const currScore = prevScore + 1;\n      const prevScoreDisplay = getDisplayNumMatrix(prevScore);\n      const currScoreDisplay = getDisplayNumMatrix(currScore);\n      // Display num dimensions = 5x5\n      for (let y = 0; y < 5; y++) {\n        for (let x = 0; x < 5; x++) {\n          const currChar = currScoreDisplay[y][x];\n          if (currChar !== prevScoreDisplay[y][x]) {\n            if (currChar === \" \") {\n              setTile(x + xOffsetRight, y + yOffset - 4, getRandomAsciiChar(), { active: false })\n            } else {\n              setTile(x + xOffsetRight, y + yOffset - 4, currChar, { active: true })\n            }\n          }\n        }\n      }\n\n      if (state.gameState.score.p2 === winningScore) {\n        setIsGameActive(false);\n        isGameActiveRef.current = false;\n        clearInterval(gameTickRef.current);\n        showWinningScreen(2);\n      }\n    };\n  }, [state.gameState.score.p2]);\n\n  const setupPlayerKeybinds = () => {    \n    document.addEventListener(\"keyup\", (e) => {\n      if (!isGameActiveRef.current) return;\n\n      if (validKeys.includes(e.code)) {\n        keyDownRef.current[e.code] = false;\n      }\n    });\n\n    document.addEventListener(\"keydown\", (e) => {\n      if (!isGameActiveRef.current) return;\n\n      if (validKeys.includes(e.code)) {\n        switch(e.code) {\n          case \"KeyW\":\n            keyDownRef.current.KeyW = true;\n            keyDownRef.current.KeyS = false;\n            break;\n          case \"KeyS\":\n            keyDownRef.current.KeyW = false;\n            keyDownRef.current.KeyS = true;\n            break;\n          case \"ArrowUp\":\n            keyDownRef.current.ArrowUp = true;\n            keyDownRef.current.ArrowDown = false;\n            break;\n          case \"ArrowDown\":\n            keyDownRef.current.ArrowUp = false;\n            keyDownRef.current.ArrowDown = true;\n            break;\n          default:\n            break;\n        }\n      }\n    });\n  };\n\n  const paddleHeight = 3;\n\n  const setupPaddles = () => {\n\n    // P1 Paddle\n    // x = xCenter - halfWidth + 1\n    const p1PaddleX = xCenter - halfWidth + 1;\n    setTile(p1PaddleX, yCenter - (paddleHeight - 1) / 2, \"█\", { active: true })\n    setTile(p1PaddleX, yCenter, \"█\", { active: true })\n    setTile(p1PaddleX, yCenter + (paddleHeight - 1) / 2, \"█\", { active: true })\n    setP1PaddleCenter(yCenter);\n\n    // P2 Paddle\n    // x = xCenter + halfWidth - 1\n    const p2PaddleX = xCenter + halfWidth - 1;\n    setTile(p2PaddleX, yCenter - (paddleHeight - 1) / 2, \"█\", { active: true })\n    setTile(p2PaddleX, yCenter, \"█\", { active: true })\n    setTile(p2PaddleX, yCenter + (paddleHeight - 1) / 2, \"█\", { active: true })\n    setP2PaddleCenter(yCenter);\n  }\n\n  const movePaddleTo = (player) => {\n    const paddleX = player === 1 ? xCenter - halfWidth + 1 : xCenter + halfWidth - 1;\n\n    if (player === 1) {\n      const outOfBounds = paddle1YDiffRef.current >= halfHeight - 1 || paddle1YDiffRef.current <= -halfHeight + 1;\n      if (outOfBounds) {\n        paddle1YDiffRef.current = paddle1PrevYRef.current;\n      } else {\n        const needsUpdate = paddle1PrevYRef.current !== paddle1YDiffRef.current;\n  \n        if (needsUpdate) {\n          const [from, to] = [yCenter + paddle1PrevYRef.current, yCenter + paddle1YDiffRef.current];\n  \n          setTile(paddleX, from - 1, getRandomAsciiChar(), { active: false, isPaddle: false });\n          setTile(paddleX, from, getRandomAsciiChar(), { active: false, isPaddle: false });\n          setTile(paddleX, from + 1, getRandomAsciiChar(), { active: false, isPaddle: false });\n          \n          setTile(paddleX, to - 1, \"█\", { active: true, isPaddle: true });\n          setTile(paddleX, to, \"█\", { active: true, isPaddle: true });\n          setTile(paddleX, to + 1, \"█\", { active: true, isPaddle: true });\n  \n          paddle1PrevYRef.current = paddle1YDiffRef.current;\n        }\n      }\n    } else if (player === 2) {\n      const outOfBounds = paddle2YDiffRef.current >= halfHeight - 1 || paddle2YDiffRef.current <= -halfHeight + 1;\n      \n      if (outOfBounds) {\n        paddle2YDiffRef.current = paddle2PrevYRef.current;\n      } else {\n        const needsUpdate = paddle2PrevYRef.current !== paddle2YDiffRef.current;\n\n        if (needsUpdate) {\n          const [from, to] = [yCenter + paddle2PrevYRef.current, yCenter + paddle2YDiffRef.current];\n\n          setTile(paddleX, from - 1, getRandomAsciiChar(), { active: false, isPaddle: false });\n          setTile(paddleX, from, getRandomAsciiChar(), { active: false, isPaddle: false });\n          setTile(paddleX, from + 1, getRandomAsciiChar(), { active: false, isPaddle: false });\n          \n          setTile(paddleX, to - 1, \"█\", { active: true, isPaddle: true });\n          setTile(paddleX, to, \"█\", { active: true, isPaddle: true });\n          setTile(paddleX, to + 1, \"█\", { active: true, isPaddle: true });\n\n          paddle2PrevYRef.current = paddle2YDiffRef.current;\n        }\n      }\n    }\n  }\n\n  const moveBallToPos = ({ x, y }) => {\n    let clearProperties = {\n      active: false,\n      isBall: false\n    };\n    let ballProperties = {\n      active: true,\n      isBall: true\n    }\n    setTile(Math.round(ballPositionRef.current.x), Math.round(ballPositionRef.current.y), getRandomAsciiChar(), clearProperties);\n    if (isGameActiveRef.current) {\n      setBallPosition({ x, y });\n      ballPositionRef.current = { x, y };\n      setTile(Math.round(x), Math.round(y), \"●\", ballProperties);\n    }\n  }\n  \n  const handleBallGameTick = () => {\n    // Direction should be unit vector, the multiply by speed\n    const [nextX, nextY] = [\n      ballPositionRef.current.x + (ballDirectionRef.current.x * ballSpeed),\n      ballPositionRef.current.y + (ballDirectionRef.current.y * ballSpeed)\n    ];\n\n    let nextPos = { x: nextX, y: nextY };\n\n    // Paddle = bounce X\n    // Hardcoded based on paddle width\n    // Paddle hitbox tempfix\n    const tempHitboxFix = 0.5;\n\n    const [x1, x2] = [xCenter - halfWidth + 1, xCenter + halfWidth - 1];\n    const [p1PaddleCenter, p2PaddleCenter] = [yCenter + paddle1YDiffRef.current, yCenter + paddle2YDiffRef.current];\n      \n    if (\n      (Math.round(nextX) <= x1 && (Math.round(nextY) <= p1PaddleCenter + 1 + tempHitboxFix && Math.round(nextY) >= p1PaddleCenter - 1 - tempHitboxFix))\n      ||\n      (Math.round(nextX) >= x2 && (Math.round(nextY) <= p2PaddleCenter + 1 + tempHitboxFix && Math.round(nextY) >= p2PaddleCenter - 1 - tempHitboxFix))\n    ) {\n      const paddleCenter = Math.round(nextX) <= xCenter - halfWidth + 1 ? p1PaddleCenter : p2PaddleCenter;\n      const newDir = getPaddleBouncedDir(nextY, paddleCenter, -ballDirectionRef.current.x);\n\n      nextPos.x = ballPositionRef.current.x + (newDir.x * ballSpeed);\n      nextPos.y = ballPositionRef.current.y + (newDir.y * ballSpeed);\n      setBallDirection(newDir);\n      ballDirectionRef.current = newDir;\n    } else {\n       // Left/Right walls = score for opposite side\n      if (Math.round(nextX) <= xCenter - halfWidth || Math.round(nextX) >= xCenter + halfWidth) {\n        nextPos = { x: xCenter, y: yCenter };\n        setBallPosition(nextPos);\n        const resetBallDirection = getRandomUnitDirectionVector();\n        setBallDirection(resetBallDirection);\n        ballDirectionRef.current = resetBallDirection;\n        if (Math.round(nextX) >= xCenter + halfWidth) {\n          incrementScore(1);\n        } else {\n          incrementScore(2);\n        }\n      };\n    }\n\n    // Check if next pos collide\n    // Up/down walls = bounce Y, keep X\n    if (Math.round(nextY) <= yCenter - halfHeight || Math.round(nextY) >= yCenter + halfHeight) {\n      nextPos.y = ballPositionRef.current.y + (-ballDirectionRef.current.y * ballSpeed);\n      const yBounceDir = { x: ballDirectionRef.current.x, y: -ballDirectionRef.current.y };\n      setBallDirection(yBounceDir);\n      ballDirectionRef.current = yBounceDir;\n    }\n\n    // Check on boundary?\n\n    moveBallToPos(nextPos);\n  }\n\n  const getPaddleBouncedDir = (ballY, paddleCenter, xDir) => {\n    // I think this is still a little buggy\n    // BallY - PaddleCenter / PaddleWidth/2 * PI + Offset to ensure y dir !== 0;\n    const ratio = (ballY - paddleCenter) / 1.5;\n    let angle = (ratio * Math.PI);\n\n    const angleThreshold = Math.PI - 1.5;\n\n    if (Math.abs(angle) >= angleThreshold) {\n      angle = angle > 0 ? angleThreshold : -angleThreshold;\n    }\n\n    const x = xDir / Math.abs(xDir) * Math.tan(Math.abs(angle));\n    const magnitude = Math.sqrt(1 + Math.pow(x, 2));\n\n    return { y: angle / Math.abs(angle) / magnitude, x: x / magnitude };\n  }\n\n  const handlePaddlesGameTick = () => {\n    // P1\n    if (keyDownRef.current.KeyW) {\n      paddle1YDiffRef.current--;\n    } else if (keyDownRef.current.KeyS) {\n      paddle1YDiffRef.current++;\n    }\n    movePaddleTo(1)\n    if (numPlayersRef.current === 2) {\n      // P2\n      if (keyDownRef.current.ArrowUp) {\n        paddle2YDiffRef.current--;\n      } else if (keyDownRef.current.ArrowDown) {\n        paddle2YDiffRef.current++;\n      }\n      movePaddleTo(2)\n    } else {\n      // Track ball certain % of the time, rest of the time is random\n      const toBall = Math.random() < 0.85;\n\n      if (toBall) {\n        // Calculate what diff to get to ball\n        // TODO: Check limits\n        if (ballPositionRef.current.y > yCenter + paddle2PrevYRef.current) {\n          paddle2YDiffRef.current++;\n        } else if (ballPositionRef.current.y < yCenter + paddle2PrevYRef.current) {\n          paddle2YDiffRef.current--;\n        }\n      } else {\n        // Weighted to not move to help with performance\n        const randDir = (Math.random() * 2) - 1;\n        if (randDir > 0.75) {\n          paddle2YDiffRef.current--;\n        } else if (randDir < -0.75) {\n          paddle2YDiffRef.current++;\n        }\n      }\n      movePaddleTo(2);\n    }\n  };\n\n  const showWinningScreen = (winner) => {\n    const winningMatrix = getWinningBoard(winner);\n    const offsetX = ((numXTiles - 1) / 2) - ((winningMatrix[0].length - 1) / 2);\n    const offsetY = ((numYTiles - 1) / 2) - ((winningMatrix.length - 1) / 2);\n\n    for (let y = 0; y < winningMatrix.length; y++) {\n      for (let x = 0; x < winningMatrix[0].length; x++) {\n        const currEl = winningMatrix[y][x].char;\n        if (currEl !== \" \") {\n          let properties = {\n            active: true\n          };\n\n          setTile(x + offsetX, y + offsetY, currEl, properties);\n        };\n      };\n    };\n\n    setupMainMenuClickHandler();\n  }\n\n  const resetGameToLanding = () => {\n    clearWinningScreen();\n    clearGameBounds();\n    clearScore();\n    resetScores();\n    clearPaddles();\n    setupLanding();\n  }\n\n  const setupMainMenuClickHandler = () => {\n    // y + 1 to y + 3\n    // x from 13 to 36\n    for (let y = yCenter + 1; y <= yCenter + 3; y++) {\n      // It's not perfect :(\n      for (let x = xCenter - 12; x <= xCenter + 11; x++) {\n        setClickHandler(x, y, resetGameToLanding);\n      }\n    }\n  }\n\n  const clearWinningScreen = () => {\n    const winningMatrix = getWinningBoard(1);\n    const offsetX = ((numXTiles - 1) / 2) - ((winningMatrix[0].length - 1) / 2);\n    const offsetY = ((numYTiles - 1) / 2) - ((winningMatrix.length - 1) / 2);\n\n    for (let y = 0; y < winningMatrix.length; y++) {\n      for (let x = 0; x < winningMatrix[0].length; x++) {\n        const currEl = winningMatrix[y][x].char;\n        if (currEl !== \" \") {\n          let properties = {\n            active: false,\n            handleClick: undefined,\n          };\n\n          setTile(x + offsetX, y + offsetY, getRandomAsciiChar(), properties);\n        }\n      };\n    };\n  }\n\n  const clearGameBounds = () => {\n    const [x1, x2] = [xCenter - halfWidth, xCenter + halfWidth];\n    const [y1, y2] = [yCenter - halfHeight, yCenter + halfHeight];\n\n    for (let y = y1; y <= y2; y++) {\n      for (let x = x1; x <= x2; x++) {\n        if (y === y1 || y === y2) {\n          setTile(x, y, getRandomAsciiChar(), { active: false })\n        } else if (x === x1 || x === x2) {\n          setTile(x, y, getRandomAsciiChar(), { active: false });\n        };\n      }\n    };\n  };\n\n  const clearScore = () => {\n    const [y1, y2] = [yOffset - 4, yOffset];\n\n    // Left bound\n    const leftScore = state.gameState.score.p1;\n    const leftScoreMatrix = getDisplayNumMatrix(leftScore);\n    for (let y = 0; y < 5; y++) {\n      for (let x = 0; x < 5; x++) {\n        const currChar = leftScoreMatrix[y][x];\n        if (currChar !== \" \") {\n          setTile(x + xOffsetLeft, y + yOffset - 4, getRandomAsciiChar(), { active: false });\n        }\n      }\n    }\n    \n    // Middle bounds\n    setTile(xCenter, y1 + 1, getRandomAsciiChar(), { active: false });\n    setTile(xCenter, y2 - 1, getRandomAsciiChar(), { active: false });\n    \n    // Right bound\n    const rightScore = state.gameState.score.p2;\n    const rightScoreMatrix = getDisplayNumMatrix(rightScore);\n    for (let y = 0; y < 5; y++) {\n      for (let x = 0; x < 5; x++) {\n        const currChar = rightScoreMatrix[y][x];\n        if (currChar !== \" \") {\n          setTile(x + xOffsetRight, y + yOffset - 4, getRandomAsciiChar(), { active: false });\n        }\n      }\n    }\n  };\n\n  const clearPaddles = () => {\n    const paddle1X = xCenter - halfWidth + 1;\n    const p1Center = yCenter + paddle1YDiffRef.current;\n    setTile(paddle1X, p1Center - 1, getRandomAsciiChar(), { active: false });\n    setTile(paddle1X, p1Center, getRandomAsciiChar(), { active: false });\n    setTile(paddle1X, p1Center + 1, getRandomAsciiChar(), { active: false });\n    \n    const paddle2X = xCenter + halfWidth - 1;\n    const p2Center = yCenter + paddle2YDiffRef.current;\n    setTile(paddle2X, p2Center - 1, getRandomAsciiChar(), { active: false });\n    setTile(paddle2X, p2Center, getRandomAsciiChar(), { active: false });\n    setTile(paddle2X, p2Center + 1, getRandomAsciiChar(), { active: false });\n  }\n\n  // const setupColorThemeToggle = () => {\n  //   const colorThemeMatrix = getColorThemeToggle();\n  //   for (let y = 0; y < colorThemeMatrix.length; y++) {\n  //     for (let x = 0; x < colorThemeMatrix[0].length; x++) {\n  //       const currEl = colorThemeMatrix[y][x].char;\n  //       if (currEl !== \" \") {\n  //         let properties = {\n  //           active: true\n  //         };\n\n  //         // 4 <= y <= 6\n  //         // 2 <= x <= 15, 17 <= x <= 30\n  //         // x !== 9, x !== 24\n\n  //         // Default White\n  //         if (\n  //           (y === 4 && (x >= 2 && x <= 15)) ||\n  //           (y === 5 && (x >= 2 && x <= 15)) ||\n  //           (y === 6 && (x >= 2 && x <= 15))\n  //         ) {\n  //           properties.selected = true;\n  //           properties.handleClick = () => toggleColor('white');\n  //         };\n          \n  //         // Default Matrix\n  //         if (\n  //           (y === 4 && (x >= 17 && x <= 30)) ||\n  //           (y === 5 && (x >= 17 && x <= 30)) ||\n  //           (y === 6 && (x >= 17 && x <= 30))\n  //         ) {\n  //           // properties.selected = true;\n  //           properties.handleClick = () => toggleColor('green');\n  //         };\n\n  //         setTile(numXTiles - colorThemeMatrix[0].length + x - 1, y + 1, currEl, properties);\n  //       } else {\n  //         if (\n  //           (y === 4 && (x >= 2 && x <= 15)) ||\n  //           (y === 5 && (x >= 2 && x <= 15)) ||\n  //           (y === 6 && (x >= 2 && x <= 15))\n  //         ) {\n  //           setClickHandler(numXTiles - colorThemeMatrix[0].length + x - 1, y + 1, () => toggleColor('white'));\n  //         };\n          \n  //         // Default Matrix\n  //         if (\n  //           (y === 4 && (x >= 17 && x <= 30)) ||\n  //           (y === 5 && (x >= 17 && x <= 30)) ||\n  //           (y === 6 && (x >= 17 && x <= 30))\n  //         ) {\n  //           setClickHandler(numXTiles - colorThemeMatrix[0].length + x - 1, y + 1, () => toggleColor('green'));\n  //         }\n  //       }\n  //     };\n  //   };\n  // }\n\n  // // Not the most efficient way\n  // Actually it just doesn't work\n  // const toggleColor = (color) => {\n  //   const colorThemeMatrix = getColorThemeToggle();\n  //   console.log(document.documentElement.style);\n  //   // This is so inefficient\n  //   const els = [\n  //     ...document.querySelectorAll(\".app\"),\n  //     ...document.querySelectorAll(\".center-line\"),\n  //     ...document.querySelectorAll(\".char-tile\"),\n  //     ...document.querySelectorAll(\".char-tile.active\")\n  //   ]\n\n  //   if (color === 'green') {\n  //     for (let y = 4; y <= 6; y++) {\n  //       for (let x = 2; x <= 30; x++) {\n  //         const currEl = colorThemeMatrix[y][x].char;\n  //         if (\n  //           (y === 4 && (x >= 2 && x <= 15)) ||\n  //           (y === 5 && x !== 9 && (x >= 2 && x <= 15)) ||\n  //           (y === 6 && (x >= 2 && x <= 15))\n  //         ) {\n  //           setTile(numXTiles - colorThemeMatrix[0].length + x - 1, y + 1, currEl, { active: true, selected: false, handleClick: () => toggleColor('white')});\n  //         };\n\n  //         if (\n  //           (y === 4 && (x >= 17 && x <= 30)) ||\n  //           (y === 5 && x !== 24 && (x >= 17 && x <= 30)) ||\n  //           (y === 6 && (x >= 17 && x <= 30))\n  //         ) {\n  //           setTile(numXTiles - colorThemeMatrix[0].length + x - 1, y + 1, currEl, { active: true, selected: true, handleClick: () => toggleColor('green') });\n  //         };\n  //       }\n  //     }\n  //     els.forEach((el) => {\n  //       if (!el.classList.contains(\"matrix\")) {\n  //         el.classList.add(\"matrix\");\n  //       }\n  //     });\n  //   } else {\n  //     for (let y = 4; y <= 6; y++) {\n  //       for (let x = 2; x <= 30; x++) {\n  //         const currEl = colorThemeMatrix[y][x].char;\n  //         if (\n  //           (y === 4 && (x >= 2 && x <= 15)) ||\n  //           (y === 5 && x !== 9 && (x >= 2 && x <= 15)) ||\n  //           (y === 6 && (x >= 2 && x <= 15))\n  //         ) {\n  //           setTile(numXTiles - colorThemeMatrix[0].length + x - 1, y + 1, currEl, { active: true, selected: true, handleClick: () => toggleColor('white') });\n  //         };\n\n  //         if (\n  //           (y === 4 && (x >= 17 && x <= 30)) ||\n  //           (y === 5 && x !== 24 && (x >= 17 && x <= 30)) ||\n  //           (y === 6 && (x >= 17 && x <= 30))\n  //         ) {\n  //           setTile(numXTiles - colorThemeMatrix[0].length + x - 1, y + 1, currEl, { active: true, selected: false, handleClick: () => toggleColor('green') });\n  //         };\n  //       }\n  //     }\n  //     els.forEach((el) => {\n  //       if (!el.classList.contains(\"matrix\")) {\n  //         el.classList.remove(\"matrix\");\n  //       }\n  //     });\n  //   }\n  // }\n\n  let centerTileComponent;\n  let leftWall, rightWall, topWall, bottomWall;\n\n  // if (isGameActive) {\n  //   const numTiles = 2 * halfHeight - 1;\n\n  //   let centerTiles = [];\n  //   for (let i = 0; i < numTiles; i++) {\n  //     centerTiles.push(<CenterTile />);\n  //   }\n\n  //   // Magic numbers OP these are way off of the big screen lmao\n  //   centerTileComponent = (\n  //     <div className=\"center-line\" style={{ top: (yCenter - halfHeight + 1) * 19, left: xCenter * 9}}>\n  //       {centerTiles.map((tile, idx) => {\n  //         return (\n  //           <div className=\"center-tile\" key={`center-${idx}`}>\n  //             { tile }\n  //           </div>\n  //         )\n  //       })}\n  //     </div>\n  //   )\n    \n  //   // I give up on this\n  //   leftWall = <VerticalWall style={{ top: (yCenter - halfHeight) * 19, left: (xCenter - halfWidth + 0.4) * 9}}/>\n  //   rightWall = <VerticalWall style={{ top: (yCenter - halfHeight) * 19, left: (xCenter + halfWidth + 0.4) * 9}}/>\n  //   topWall = <HorizontalWall style={{ top: (yCenter - halfHeight + 2) * 19 - 30.5, left: (xCenter - halfWidth) * 9 + 1}}/>\n  //   bottomWall = <HorizontalWall style={{ top: (yCenter + halfHeight - 2) * 19 + 45.5, left: (xCenter - halfWidth) * 9 + 1}}/>\n  // };\n\n  const setupDisclaimer = () => {\n    const disclaimerMatrix = getDisclaimer();\n\n    const offsetX = ((numXTiles - 1) / 2) - ((disclaimerMatrix[0].length - 1) / 2);\n    const offsetY = ((numYTiles - 1)) - ((disclaimerMatrix.length - 1));\n    \n    for (let y = 0; y < disclaimerMatrix.length; y++) {\n      for (let x = 0; x < disclaimerMatrix[0].length; x++) {\n        const currEl = disclaimerMatrix[y][x].char;\n        if (currEl !== \" \") {\n          let properties = {\n            active: true\n          };\n\n          setTile(x + offsetX, y + offsetY, currEl, properties);\n        };\n      };\n    };\n  }\n\n  return (\n    <div className=\"app\" ref={appRef}>\n      <ul className=\"rows\">\n        {state.tileMatrix.map((row, xidx) => {\n          return (\n            <li className={`row-${xidx}`} key={`row-${xidx}`}>\n              {row.map((tile, yidx) => {\n                return (\n                  <CharTile\n                    char={tile.char}\n                    active={tile.properties.active}\n                    selected={tile.properties.selected}\n                    handleClick={tile.properties.handleClick}\n                    key={`${xidx}-${yidx}`}\n                    isBall={tile.properties.isBall}\n                    isPaddle={tile.properties.isPaddle}\n                  />\n                )\n              })}\n            </li>\n          )\n        })}\n      </ul>\n      {centerTileComponent}\n      {leftWall}\n      {rightWall}\n      {topWall}\n      {bottomWall}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\n\n// Removed StrictMode since it was calling reducer twice\n// Technically not best practice with my use of reducers, but oh well\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}