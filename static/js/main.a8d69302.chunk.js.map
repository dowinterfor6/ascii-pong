{"version":3,"sources":["util/util.js","components/CharTile.jsx","components/App.jsx","index.js"],"names":["getRandomAsciiChar","validNums","i","push","randNum","Math","round","random","length","String","fromCharCode","getLanding","docHeight","docWidth","landingLines","split","filter","line","map","trim","formattedLines","y","row","x","char","displayNumArr","getDisplayNumMatrix","num","el","str","window","getNum","CharTile","active","selected","handleClick","isBall","tileRef","useRef","className","ref","onClick","MemoizedCharTile","React","memo","SET_TILES","SET_TILE","SET_CLICK_HANDLER","SET_PLAYERS","INCREMENT_SCORE","RESET_SCORE","reducer","state","action","nextState","Object","assign","type","tileMatrix","payload","properties","offsetX","offsetY","players","includes","oldScore","gameState","score","player","p1","p2","initialState","landing","game","winnder","undefined","App","useReducer","dispatch","useState","p1PaddleCenter","setP1PaddleCenter","p2PaddleCenter","setP2PaddleCenter","isGameActive","setIsGameActive","isGameActiveRef","p1PaddleCenterRef","p2PaddleCenterRef","getRandomUnitDirectionVector","xCoeff","yCoeff","magnitude","sqrt","pow","ballDirection","setBallDirection","ballPosition","setBallPosition","ballDirectionRef","ballPositionRef","paddle1YDiffRef","setTile","setClickHandler","incrementScore","increment","reset","appRef","numXTiles","floor","document","body","clientWidth","numYTiles","clientHeight","useEffect","initialRefMatrix","refObj","setupLanding","setupPlayerKeybinds","landingMatrix","currEl","setupClickEvents","setPlayersCallback","startGameCallback","console","log","setPlayers","clearLanding","setupGameArea","current","randChar","clickable","xCenter","yCenter","halfWidth","halfHeight","setupGameBounds","setupScoreBoard","setupPaddles","moveBallToPos","setInterval","handleBallGameTick","handlePaddlesGameTick","x1","x2","y1","y2","xOffsetLeft","xOffsetRight","zero","currChar","prevScore","currScore","prevScoreDisplay","currScoreDisplay","addEventListener","e","paddleHeight","code","movePaddle","p1PaddleX","p2PaddleX","currPos","direction","paddleX","nextX","nextY","nextPos","tempHitboxFix","paddleCenter","newDir","getPaddleBouncedDir","resetBallDirection","yBounceDir","ballY","xDir","angle","PI","angleThreshold","abs","tan","toPos","movePaddleTo","xidx","tile","yidx","ReactDOM","render","getElementById"],"mappings":"qMAAaA,EAAqB,WAKhC,IAFA,IAAMC,EAAY,GAETC,EAAI,GAAIA,GAAK,IAAKA,KACrBA,EAAI,KAAOA,EAAI,MACjBD,EAAUE,KAAKD,GAInB,IACME,EAAUH,EADAI,KAAKC,MAAMD,KAAKE,SAAWN,EAAUO,SAErD,OAAOC,OAAOC,aAAaN,IAgBhBO,EAAa,SAACC,EAAWC,GA8BpC,IA7BA,IAqBIC,EArBa,ozBAsBdC,MAAM,MACNC,QAAO,SAACC,GAAD,MAAmB,KAATA,KACjBC,KAAI,SAACD,GAAD,OAAUA,EAAKE,UAElBC,EAAiB,GAGbC,EAAI,EAAGA,EAAIP,EAAaN,OAAQa,IAAK,CAG3C,IAFA,IAAMC,EAAM,GAEJC,EAAI,EAAGA,EAAIT,EAAa,GAAGN,OAAQe,IACzCD,EAAInB,KAAK,CAAEqB,KAAMV,EAAaO,GAAGE,KAGnCH,EAAejB,KAAKmB,GAKtB,OAAOF,GAIHK,EAAgB,CAAC,kGAAD,s+BA+DTC,EAAsB,SAACC,GAGlC,OAAOF,EAAcE,GAAKZ,MAAM,MAAMC,QAAO,SAACY,GAAD,MAAe,KAAPA,KAAWV,KAAI,SAACW,GAAD,OAASA,EAAId,MAAM,QAGzFe,OAAOnB,WAAaA,EACpBmB,OAAOC,OAASL,EC/IhB,IAAMM,EAAW,SAAC,GAAqD,IAAnDR,EAAkD,EAAlDA,KAAMS,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACjDC,EAAUC,mBAGhB,OACE,qBACEC,UAAS,uCAELN,EAAS,SAAW,GAFf,qBAGLC,EAAW,WAAa,GAHnB,qBAILC,EAAc,eAAiB,GAJ1B,qBAKLC,EAAS,OAAS,GALb,YAOTI,IAAKH,EACLI,QAASN,EATX,SAWGX,KAOQkB,EAFUC,IAAMC,KAAKZ,GCnB9Ba,EAAY,WACZC,EAAW,UACXC,EAAoB,kBACpBC,EAAc,aACdC,EAAkB,iBAClBC,EAAc,aAEdC,EAAU,SAACC,EAAOC,GACtB,IAEI9B,EACAF,EAHAiC,EAAYC,OAAOC,OAAO,GAAIJ,GAKlC,OAAQC,EAAOI,MACb,KAAKZ,EAEH,OADAS,EAAUI,WAAaL,EAAOM,QACvBL,EACT,KAAKR,EACHvB,EAAI8B,EAAOM,QAAQpC,EACnBF,EAAIgC,EAAOM,QAAQtC,EAFrB,MAG+BgC,EAAOM,QAA5BnC,EAHV,EAGUA,KAAMoC,EAHhB,EAGgBA,WAGd,OAFAN,EAAUI,WAAWrC,GAAGE,GAAGC,KAAOA,EAClC8B,EAAUI,WAAWrC,GAAGE,GAAGqC,WAAaA,EACjCN,EACT,KAAKP,EACHxB,EAAI8B,EAAOM,QAAQpC,EACnBF,EAAIgC,EAAOM,QAAQtC,EAFrB,IAGUc,EAAgBkB,EAAOM,QAAvBxB,YAER,OADAmB,EAAUI,WAAWrC,GAAGE,GAAGqC,WAAWzB,YAAcA,EAC7CmB,EACT,KAAKN,EAAL,MAC+BK,EAAOM,QAA5BE,EADV,EACUA,QAASC,EADnB,EACmBA,QAEjB,GADAR,EAAUS,QAAUV,EAAOM,QAAQI,QACT,IAAtBT,EAAUS,QAAe,CAE3B,IAAK,IAAI1C,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,GAAK,GAAIA,IACb,IAANF,EACE,CAAC,EAAG,EAAG,GAAI,IAAI2C,SAASzC,KAC1B+B,EAAUI,WAAWrC,EAAIyC,GAASvC,EAAIsC,GAASD,WAAW1B,UAAW,GAGvEoB,EAAUI,WAAWrC,EAAIyC,GAASvC,EAAIsC,GAASD,WAAW1B,UAAW,EAM3E,IAAK,IAAIb,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,GAAIA,GAAK,GAAIA,IACd,IAANF,EACE,CAAC,GAAI,GAAI,GAAI,IAAI2C,SAASzC,KAC5B+B,EAAUI,WAAWrC,EAAIyC,GAASvC,EAAIsC,GAASD,WAAW1B,UAAW,GAGvEoB,EAAUI,WAAWrC,EAAIyC,GAASvC,EAAIsC,GAASD,WAAW1B,UAAW,MAItE,CAEL,IAAK,IAAIb,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,GAAK,GAAIA,IACb,IAANF,EACE,CAAC,EAAG,EAAG,GAAI,IAAI2C,SAASzC,KAC1B+B,EAAUI,WAAWrC,EAAIyC,GAASvC,EAAIsC,GAASD,WAAW1B,UAAW,GAGvEoB,EAAUI,WAAWrC,EAAIyC,GAASvC,EAAIsC,GAASD,WAAW1B,UAAW,EAM3E,IAAK,IAAIb,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,GAAIA,GAAK,GAAIA,IACd,IAANF,EACE,CAAC,GAAI,GAAI,GAAI,IAAI2C,SAASzC,KAC5B+B,EAAUI,WAAWrC,EAAIyC,GAASvC,EAAIsC,GAASD,WAAW1B,UAAW,GAGvEoB,EAAUI,WAAWrC,EAAIyC,GAASvC,EAAIsC,GAASD,WAAW1B,UAAW,EAK7E,OAAOoB,EACT,KAAKL,EACH,IAAMgB,EAAWb,EAAMc,UAAUC,MAAhB,WAA0Bd,EAAOM,QAAQS,SAE1D,OADAd,EAAUY,UAAUC,MAApB,WAA8Bd,EAAOM,QAAQS,SAAYH,EAAWZ,EAAOM,QAAQQ,MAC5Eb,EACT,KAAKJ,EAGH,OAFAI,EAAUY,UAAUC,MAAME,GAAK,EAC/Bf,EAAUY,UAAUC,MAAMG,GAAK,EACxBhB,EACT,QACE,OAAOF,IAIPmB,EAAe,CACnBb,WAAY,GACZK,QAAS,EAETG,UAAW,CACTM,SAAS,EACTC,MAAM,EACNC,aAASC,EACTR,MAAO,CACLE,GAAI,EACJC,GAAI,KA6kBKM,EAxkBH,WAAO,IAAD,EACUC,qBAAW1B,EAASoB,GAD9B,mBACTnB,EADS,KACF0B,EADE,OAE4BC,qBAF5B,mBAETC,EAFS,KAEOC,EAFP,OAG4BF,qBAH5B,mBAGTG,EAHS,KAGOC,EAHP,OAKwBJ,oBAAS,GALjC,mBAKTK,EALS,KAKKC,EALL,KAMVC,EAAkBhD,iBAAO8C,GACzBG,EAAoBjD,iBAAO0C,GAC3BQ,EAAoBlD,iBAAO4C,GAI3BO,EAA+B,WAEnC,IAAMlE,EAAI,GAAAlB,KAAKE,SAJK,GAKdc,EAAIhB,KAAKE,SACTmF,EAAuC,IAA9BrF,KAAKC,MAAMD,KAAKE,WAAmB,EAAI,EAChDoF,EAAuC,IAA9BtF,KAAKC,MAAMD,KAAKE,WAAmB,EAAI,EAChDqF,EAAYvF,KAAKwF,KAAKxF,KAAKyF,IAAIvE,EAAG,GAAKlB,KAAKyF,IAAIzE,EAAG,IACzD,MAAO,CAAEE,EAAGmE,EAASnE,EAAIqE,EAAWvE,EAAGsE,EAAStE,EAAIuE,IAnBtC,EAuB0Bb,mBAASU,KAvBnC,mBAuBTM,EAvBS,KAuBMC,EAvBN,OAyBwBjB,mBAAS,CAAExD,EAAG,EAAGF,EAAG,IAzB5C,mBAyBT4E,EAzBS,KAyBKC,EAzBL,KA0BVC,EAAmB7D,iBAAOyD,GAC1BK,EAAkB9D,iBAAO2D,GAEzBI,EAAkB/D,iBAAO,GAQzBgE,GAPkBhE,iBAAO,GAOf,SAACf,EAAGF,EAAGG,EAAMoC,GAAb,OAA4BkB,EAAS,CACnDrB,KAAMX,EACNa,QAAS,CACPpC,IACAF,IACAG,OACAoC,kBAIE2C,EAAkB,SAAChF,EAAGF,EAAGc,GAAP,OAAuB2C,EAAS,CACtDrB,KAAMV,EACNY,QAAS,CACPpC,IACAF,IACAc,kBAaEqE,EAAiB,SAACpC,GAAD,OAAYU,EAAS,CAC1CrB,KAAMR,EACNU,QAAS,CACPS,SACAD,MAAO,MAQXrC,OAAO2E,UAAYD,EACnB1E,OAAO4E,MALa,kBAAM5B,EAAS,CACjCrB,KAAMP,KAMRpB,OAAOwE,QAAUA,EAIjB,IAAMK,EAASrE,mBAMXsE,EAAYvG,KAAKwG,MAAMC,SAASC,KAAKC,YAJJ,GAKjCC,EAAY5G,KAAKwG,MAAMC,SAASC,KAAKG,aALR,IAS7BN,EAAY,IAAM,GACpBA,IAGEK,EAAY,IAAM,GACpBA,IAIFE,qBAAU,WAGR,IAFA,IAAMC,EAAmB,GAEhB/F,EAAI,EAAGA,EAAI4F,EAAW5F,IAAK,CAGlC,IAFA,IAAMC,EAAM,GAEHC,EAAI,EAAGA,EAAIqF,EAAWrF,IAAK,CAClC,IACM8F,EAAS,CACb7F,KAFWxB,IAGX4D,WAAY,CACV3B,QAAQ,IAGZX,EAAInB,KAAKkH,GAGXD,EAAiBjH,KAAKmB,GAzFEwD,EAAS,CACnCrB,KAAMZ,EACNc,QA0FSyD,IAETE,IAEAC,OACC,IAEH,IAAMD,EAAe,WAKnB,IAJA,IAAME,EAAgB7G,IAChBkD,GAAY+C,EAAY,GAAK,GAAOY,EAAc,GAAGhH,OAAS,GAAK,EACnEsD,GAAYmD,EAAY,GAAK,GAAOO,EAAchH,OAAS,GAAK,EAE7Da,EAAI,EAAGA,EAAImG,EAAchH,OAAQa,IACxC,IAAK,IAAIE,EAAI,EAAGA,EAAIiG,EAAc,GAAGhH,OAAQe,IAAK,CAChD,IAAMkG,EAASD,EAAcnG,GAAGE,GAAGC,KACnC,GAAe,MAAXiG,EAAgB,CAClB,IAAI7D,EAAa,CACf3B,QAAQ,IAKD,IAANZ,GAAYE,GAAK,IAAMA,GAAK,IACtB,IAANF,GAAW,CAAC,GAAI,GAAI,GAAI,IAAI2C,SAASzC,IAC/B,IAANF,GAAYE,GAAK,IAAMA,GAAK,MAE7BqC,EAAW1B,UAAW,GAExBoE,EAAQ/E,EAAIsC,EAASxC,EAAIyC,EAAS2D,EAAQ7D,IAKhD8D,EAAiB7D,EAASC,IAGtB4D,EAAmB,SAAC7D,EAASC,GAEjC,IAAK,IAAIzC,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAI5BgF,EAHkBhF,EAAIsC,EACJxC,EAAIyC,GACT,kBAAM6D,GAAmB9D,EAASC,EAAS,MAM5D,IAAK,IAAIzC,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAK,IAAIE,EAAI,GAAIA,GAAK,GAAIA,IAAK,CAI7BgF,EAHkBhF,EAAIsC,EACJxC,EAAIyC,GACT,kBAAM6D,GAAmB9D,EAASC,EAAS,MAM5D,IAAK,IAAIzC,EAAI,GAAIA,GAAK,GAAIA,IACxB,IAAK,IAAIE,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAG5BgF,EAFkBhF,EAAIsC,EACJxC,EAAIyC,EACgB8D,MAKtCD,GAAqB,SAAC9D,EAASC,EAASnC,GAC5CkG,QAAQC,IAAR,UAAenG,EAAf,MAxIiB,SAACkC,EAASC,EAASC,GAAYe,EAAS,CACzDrB,KAAMT,EACNW,QAAS,CACPE,UACAC,UACAC,aAoIFgE,CAAWlE,EAASC,EAASnC,IAGzBiG,GAAoB,WACxBC,QAAQC,IAAI,cACZE,KACAC,KACA5C,GAAgB,GAChBC,EAAgB4C,SAAU,GAGtBF,GAAe,WACnBH,QAAQC,IAAI,iBAKZ,IAJA,IAAMN,EAAgB7G,IAChBkD,GAAY+C,EAAY,GAAK,GAAOY,EAAc,GAAGhH,OAAS,GAAK,EACnEsD,GAAYmD,EAAY,GAAK,GAAOO,EAAchH,OAAS,GAAK,EAE7Da,EAAI,EAAGA,EAAImG,EAAchH,OAAQa,IACxC,IAAK,IAAIE,EAAI,EAAGA,EAAIiG,EAAc,GAAGhH,OAAQe,IAAK,CAEhD,GAAe,MADAiG,EAAcnG,GAAGE,GAAGC,KACf,CAClB,IAAM2G,EAAWnI,IACjBsG,EAAQ/E,EAAIsC,EAASxC,EAAIyC,EAASqE,EAAU,CAAElG,QAAQ,EAAOmG,WAAW,EAAOjG,iBAAawC,OAM9F0D,IAAWzB,EAAY,GAAK,EAC5B0B,IAAWrB,EAAY,GAAK,EAG5BsB,GAAY,GACZC,GAAa,GAKbP,GAAgB,WACpBJ,QAAQC,IAAI,mBACZW,KACAC,KACAC,KACAC,GAAc,CAAErH,EAAG8G,GAAShH,EAAGiH,KAGpBO,aAAY,WACrBC,KACAC,OACC,IAAO,KAGNN,GAAkB,WAItB,IAJ6B,IACtBO,EAAWX,GAAUE,GAAjBU,EAA4BZ,GAAUE,GAC1CW,EAAWZ,GAAUE,GAAjBW,EAA6Bb,GAAUE,GAEzCnH,EAAI6H,EAAI7H,GAAK8H,EAAI9H,IACxB,IAAK,IAAIE,EAAIyH,EAAIzH,GAAK0H,EAAI1H,IACpBF,IAAM6H,GAAM7H,IAAM8H,EACpB7C,EAAQ/E,EAAGF,EAAG,IAAK,CAAEY,QAAQ,IACpBV,IAAMyH,GAAMzH,IAAM0H,EAC3B3C,EAAQ/E,EAAGF,EAAG,IAAK,CAAEY,QAAQ,IACpBV,IAAM8G,IAGf/B,EAAQ/E,EAAGF,EAAG,IAAK,CAAEY,QAAQ,KAQ/BmH,GAAcf,GAAO,EACrBgB,GAAehB,GAAO,EAGtBK,GAAkB,WAItB,IAJ6B,IAEvBY,EAAO5H,EAAoB,GAExBL,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMgI,EAAWD,EAAKjI,GAAGE,GACR,MAAbgI,GACFjD,EAAQ/E,EAAI6H,GAAa/H,EAbjB,EAa8BkI,EAAU,CAAEtH,QAAQ,IAKhEqE,EAAQ+B,GAASa,EAAQ,SAAK,CAAEjH,QAAQ,IACxCqE,EAAQ+B,GAASc,EAAQ,SAAK,CAAElH,QAAQ,IAExC,IAAK,IAAIZ,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMgI,EAAWD,EAAKjI,GAAGE,GACR,MAAbgI,GACFjD,EAAQ/E,EAAI8H,GAAchI,EAzBlB,EAyB+BkI,EAAU,CAAEtH,QAAQ,MAUnEkF,qBAAU,WACR,GAAiC,IAA7B/D,EAAMc,UAAUC,MAAME,IAEtBjB,EAAMc,UAAUC,MAAME,IAPP,EAO2B,CAC5CwD,QAAQC,IAAI,oBAMZ,IALA,IAAM0B,EAAYpG,EAAMc,UAAUC,MAAME,GAAK,EACvCoF,EAAYD,EAAY,EACxBE,EAAmBhI,EAAoB8H,GACvCG,EAAmBjI,EAAoB+H,GAEpCpI,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMgI,EAAWI,EAAiBtI,GAAGE,GACjCgI,IAAaG,EAAiBrI,GAAGE,KAClB,MAAbgI,EACFjD,EAAQ/E,EAAI6H,GAAa/H,EAlDrB,EAkDkCrB,IAAsB,CAAEiC,QAAQ,IAEtEqE,EAAQ/E,EAAI6H,GAAa/H,EApDrB,EAoDkCkI,EAAU,CAAEtH,QAAQ,KArBjD,IA2BbmB,EAAMc,UAAUC,MAAME,IACxBwD,QAAQC,IAAI,cAIf,CAAC1E,EAAMc,UAAUC,MAAME,KAG1B8C,qBAAU,WACR,GAAiC,IAA7B/D,EAAMc,UAAUC,MAAMG,IAEtBlB,EAAMc,UAAUC,MAAMG,IAtCP,EAsC2B,CAC5CuD,QAAQC,IAAI,oBAMZ,IALA,IAAM0B,EAAYpG,EAAMc,UAAUC,MAAMG,GAAK,EACvCmF,EAAYD,EAAY,EACxBE,EAAmBhI,EAAoB8H,GACvCG,EAAmBjI,EAAoB+H,GAEpCpI,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMgI,EAAWI,EAAiBtI,GAAGE,GACjCgI,IAAaG,EAAiBrI,GAAGE,KAClB,MAAbgI,EACFjD,EAAQ/E,EAAI8H,GAAchI,EAjFtB,EAiFmCrB,IAAsB,CAAEiC,QAAQ,IAEvEqE,EAAQ/E,EAAI8H,GAAchI,EAnFtB,EAmFmCkI,EAAU,CAAEtH,QAAQ,KApDlD,IA0DbmB,EAAMc,UAAUC,MAAMG,IACxBuD,QAAQC,IAAI,cAIf,CAAC1E,EAAMc,UAAUC,MAAMG,KAE1B,IAAMiD,GAAsB,WAK1BT,SAAS8C,iBAAiB,WAAW,SAACC,GACpC,GAAKvE,EAAgB4C,QAArB,CAD0C,IAKnCgB,EAAWZ,GAAUE,IAAcsB,GAAe,GAAK,EAAI,EAAvDX,EAA0Db,GAAUE,IAAcsB,GAAe,GAAK,EAAI,EAErH,OAAOD,EAAEE,MAEP,IAAK,OAEC1D,EAAgB6B,SAAU,IAC5B7B,EAAgB6B,UAKlB,MACF,IAAK,OAEC7B,EAAgB6B,QAAUM,IAC5BnC,EAAgB6B,UAKlB,MAEF,IAAK,UACC1C,EAAkB0C,UAAYgB,IAChC/D,EAAkBK,EAAkB0C,QAAU,GAC9C1C,EAAkB0C,UAClB8B,GAAW,EAAGxE,EAAkB0C,SAAU,IAE5C,MACF,IAAK,YACC1C,EAAkB0C,UAAYiB,IAChChE,EAAkBK,EAAkB0C,QAAU,GAC9C1C,EAAkB0C,UAClB8B,GAAW,EAAGxE,EAAkB0C,QAAS,UAS7C4B,GAAe,EAEfnB,GAAe,WAKnB,IAAMsB,EAAY5B,GAAUE,GAAY,EACxCjC,EAAQ2D,EAAW3B,IAAWwB,GAAe,GAAK,EAAG,SAAK,CAAE7H,QAAQ,IACpEqE,EAAQ2D,EAAW3B,GAAS,SAAK,CAAErG,QAAQ,IAC3CqE,EAAQ2D,EAAW3B,IAAWwB,GAAe,GAAK,EAAG,SAAK,CAAE7H,QAAQ,IACpEgD,EAAkBqD,IAClB/C,EAAkB2C,QAAUI,GAI5B,IAAM4B,EAAY7B,GAAUE,GAAY,EACxCjC,EAAQ4D,EAAW5B,IAAWwB,GAAe,GAAK,EAAG,SAAK,CAAE7H,QAAQ,IACpEqE,EAAQ4D,EAAW5B,GAAS,SAAK,CAAErG,QAAQ,IAC3CqE,EAAQ4D,EAAW5B,IAAWwB,GAAe,GAAK,EAAG,SAAK,CAAE7H,QAAQ,IACpEkD,EAAkBmD,IAClB9C,EAAkB0C,QAAUI,IAIxB0B,GAAa,SAAC5F,EAAQ+F,EAASC,GACnC,IAAMC,EAAqB,IAAXjG,EAAeiE,GAAUE,GAAY,EAAIF,GAAUE,GAAY,GAE5D,IAAf6B,GAEF9D,EAAQ+D,EAASF,EAAU,EAAGnK,IAAsB,CAAEiC,QAAQ,IAC9DqE,EAAQ+D,EAASF,EAAU,EAAG,SAAK,CAAElI,QAAQ,MAG7CqE,EAAQ+D,EAASF,EAAU,EAAGnK,IAAsB,CAAEiC,QAAQ,IAC9DqE,EAAQ+D,EAASF,EAAU,EAAG,SAAK,CAAElI,QAAQ,MAc3C2G,GAAgB,SAAC,GAAc,IAAZrH,EAAW,EAAXA,EAAGF,EAAQ,EAARA,EAC1BiF,EAAQjG,KAAKC,MAAM8F,EAAgB8B,QAAQ3G,GAAIlB,KAAKC,MAAM8F,EAAgB8B,QAAQ7G,GAAIrB,IAAsB,CAAEiC,QAAQ,EAAOG,QAAQ,IACrI8D,EAAgB,CAAE3E,IAAGF,MACrB+E,EAAgB8B,QAAU,CAAE3G,IAAGF,KAC/BiF,EAAQjG,KAAKC,MAAMiB,GAAIlB,KAAKC,MAAMe,GAAI,SAAK,CAAEY,QAAQ,EAAMG,QAAQ,KAG/D0G,GAAqB,WAAM,IAMxBwB,EACLlE,EAAgB8B,QAAQ3G,EAxPV,EAwPe4E,EAAiB+B,QAAQ3G,EAD1CgJ,EAEZnE,EAAgB8B,QAAQ7G,EAzPV,EAyPe8E,EAAiB+B,QAAQ7G,EAGpDmJ,EAAU,CAAEjJ,EAAG+I,EAAOjJ,EAAGkJ,GAKvBE,EAAgB,GAEtB,GACGpK,KAAKC,MAAMgK,IAAUjC,GAAUE,GAAY,GAAMlI,KAAKC,MAAMiK,IAAUhF,EAAkB2C,QAAU,EAAIuC,GAAiBpK,KAAKC,MAAMiK,IAAUhF,EAAkB2C,QAAU,EAAIuC,GAE5KpK,KAAKC,MAAMgK,IAAUjC,GAAUE,GAAY,GAAMlI,KAAKC,MAAMiK,IAAU/E,EAAkB0C,QAAU,EAAIuC,GAAiBpK,KAAKC,MAAMiK,IAAU/E,EAAkB0C,QAAU,EAAIuC,EAC7K,CACA5C,QAAQC,IAAI,UACZ,IAAM4C,EAAerK,KAAKC,MAAMgK,IAAUjC,GAAUE,GAAY,EAAIhD,EAAkB2C,QAAU1C,EAAkB0C,QAC5GyC,EAASC,GAAoBL,EAAOG,GAAevE,EAAiB+B,QAAQ3G,GAElFiJ,EAAQjJ,EAAI6E,EAAgB8B,QAAQ3G,EA5QtB,EA4Q2BoJ,EAAOpJ,EAChDiJ,EAAQnJ,EAAI+E,EAAgB8B,QAAQ7G,EA7QtB,EA6Q2BsJ,EAAOtJ,EAChD2E,EAAiB2E,GACjBxE,EAAiB+B,QAAUyC,OAG3B,GAAItK,KAAKC,MAAMgK,IAAUjC,GAAUE,IAAalI,KAAKC,MAAMgK,IAAUjC,GAAUE,GAAW,CAExFrC,EADAsE,EAAU,CAAEjJ,EAAG8G,GAAShH,EAAGiH,KAG3B,IAAMuC,EAAqBpF,IAC3BO,EAAiB6E,GACjB1E,EAAiB+B,QAAU2C,EACvBxK,KAAKC,MAAMgK,IAAUjC,GAAUE,IACjCV,QAAQC,IAAI,cACZtB,EAAe,KAEfqB,QAAQC,IAAI,aACZtB,EAAe,IAOrB,GAAInG,KAAKC,MAAMiK,IAAUjC,GAAUE,IAAcnI,KAAKC,MAAMiK,IAAUjC,GAAUE,GAAY,CAC1FgC,EAAQnJ,EAAI+E,EAAgB8B,QAAQ7G,EAtStB,GAsS4B8E,EAAiB+B,QAAQ7G,EACnE,IAAMyJ,EAAa,CAAEvJ,EAAG4E,EAAiB+B,QAAQ3G,EAAGF,GAAI8E,EAAiB+B,QAAQ7G,GACjF2E,EAAiB8E,GACjB3E,EAAiB+B,QAAU4C,EAK7BlC,GAAc4B,IAGVI,GAAsB,SAACG,EAAOL,EAAcM,GAGhD,IACIC,GADWF,EAAQL,GAAgB,IAClBrK,KAAK6K,GAEpBC,EAAiB9K,KAAK6K,GAAK,IAE7B7K,KAAK+K,IAAIH,IAAUE,IACrBF,EAAQA,EAAQ,EAAIE,GAAkBA,GAGxC,IAAM5J,EAAIyJ,EAAO3K,KAAK+K,IAAIJ,GAAQ3K,KAAKgL,IAAIhL,KAAK+K,IAAIH,IAC9CrF,EAAYvF,KAAKwF,KAAK,EAAIxF,KAAKyF,IAAIvE,EAAG,IAE5C,MAAO,CAAEF,EAAG4J,EAAQ5K,KAAK+K,IAAIH,GAASrF,EAAWrE,EAAGA,EAAIqE,IAGpDmD,GAAwB,YAnGT,SAAC3E,EAAQkH,GAE5B,IAAMjB,EAAqB,IAAXjG,EAAeiE,GAAUE,GAAY,EAAIF,GAAUE,GAAY,EAC/EjC,EAAQ+D,EAASiB,EAAQ,EAAG,SAAK,CAAErJ,QAAQ,IAC3CqE,EAAQ+D,EAASiB,EAAO,SAAK,CAAErJ,QAAQ,IACvCqE,EAAQ+D,EAASiB,EAAQ,EAAG,SAAK,CAAErJ,QAAQ,IAgG3CsJ,CAAa,EAAGjD,GAAUjC,EAAgB6B,UAI5C,OACE,qBAAK3F,UAAU,MAAMC,IAAKmE,EAA1B,SACE,oBAAIpE,UAAU,OAAd,SACGa,EAAMM,WAAWxC,KAAI,SAACI,EAAKkK,GAC1B,OACE,oBAAIjJ,UAAS,cAASiJ,GAAtB,SACGlK,EAAIJ,KAAI,SAACuK,EAAMC,GACd,OACE,cAAC,EAAD,CACElK,KAAMiK,EAAKjK,KACXS,OAAQwJ,EAAK7H,WAAW3B,OACxBC,SAAUuJ,EAAK7H,WAAW1B,SAC1BC,YAAasJ,EAAK7H,WAAWzB,YAE7BC,OAAQqJ,EAAK7H,WAAWxB,QAN1B,UAKUoJ,EALV,YAKkBE,QARxB,cAA0CF,YCnqBtDG,IAASC,OACP,cAAC,EAAD,IACA9E,SAAS+E,eAAe,W","file":"static/js/main.a8d69302.chunk.js","sourcesContent":["export const getRandomAsciiChar = () => {\n  // 33 to 165\n  // NOT 127\n  const validNums = [];\n  // Kinda normal chars\n  for (let i = 33; i <= 255; i++) {\n    if (i < 127 || i > 160) {\n      validNums.push(i);\n    }\n  }\n\n  const randIdx = Math.round(Math.random() * validNums.length);\n  const randNum = validNums[randIdx]\n  return String.fromCharCode(randNum);\n}\n\nexport const getAllAsciiChar = () => {\n  const validNums = [];\n  for (let i = 33; i <= 255; i++) {\n    if (i < 127 || i > 160) {\n      validNums.push(i);\n    }\n  }\n\n  return validNums.map((code) => String.fromCharCode(code));\n}\n\n\n\nexport const getLanding = (docHeight, docWidth) => {\n  const landingChar = `\n    <section>----------------------------\n    |                                   |\n    |                                   |\n    |        <h1>ASCII Pong</h1>        |\n    |                                   |\n    |                                   |\n    |                                   |\n    |  <option>------   <option>------  |\n    |  |     1P     |   |     2P     |  |\n    |  -----</option>   -----</option>  |\n    |                                   |\n    |                                   |\n    |        <button>-----------        |\n    |        |      Start      |        |\n    |        ----------</button>        |\n    |                                   |\n    |                                   |\n    |                                   |\n    ---------------------------</section>`;\n\n  let landingLines = landingChar\n    .split(\"\\n\")\n    .filter((line) => line !== \"\")\n    .map((line) => line.trim());\n\n  let formattedLines = [];\n  \n  // Assign char to matrix\n  for(let y = 0; y < landingLines.length; y++) {\n    const row = [];\n\n    for(let x = 0; x < landingLines[0].length; x++) {\n      row.push({ char: landingLines[y][x] });\n    };\n\n    formattedLines.push(row);\n  }\n\n  // Assign property to char in matrix, e.g. hover animation/bold\n  \n  return formattedLines;\n}\n\n// Imitate 7 Segment display\nconst displayNumArr = [\n`\n ███ \n█   █\n█   █\n█   █\n ███ `,\n`\n    █\n    █\n    █\n    █\n    █`,\n`\n█████\n    █\n█████\n█    \n█████`,\n`\n█████\n    █\n█████\n    █\n█████`,\n`\n█   █\n█   █\n█████\n    █\n    █`,\n`\n█████\n█    \n█████\n    █\n█████`,\n`\n█████\n█    \n█████\n█   █\n█████`,\n`\n█████\n    █\n    █\n    █\n    █`,\n`\n█████\n█   █\n█████\n█   █\n█████`,\n`\n█████\n█   █\n█████\n    █\n█████`\n];\n\nexport const getDisplayNumMatrix = (num) => {\n  // Can't be greater than 7 (score limit)\n  // so this method works\n  return displayNumArr[num].split(\"\\n\").filter((el) => el !== \"\").map((str) => str.split(\"\")); \n}\n  \nwindow.getLanding = getLanding;\nwindow.getNum = getDisplayNumMatrix;\n// Useful:\n/*\n  Full Block: 9608\n  Smol block: 9642\n  Left Triangle: 9664\n  Triangles: 9698, 9699, 9700, 9701\n  Circle: 9679\n*/","import React, { useEffect, useRef } from 'react';\n\nconst CharTile = ({ char, active, selected, handleClick, isBall }) => {\n  const tileRef = useRef();\n  // TODO: Add fade in animation at the start\n\n  return (\n    <div\n      className={`\n        char-tile\n        ${active ? 'active' : ''}\n        ${selected ? 'selected' : ''}\n        ${handleClick ? 'is-clickable' : ''}\n        ${isBall ? 'ball' : ''}\n      `}\n      ref={tileRef}\n      onClick={handleClick}\n    >\n      {char}\n    </div>\n  )\n}\n\nconst MemoizedCharTile = React.memo(CharTile);\n\nexport default MemoizedCharTile;\n","import React, { useEffect, useReducer, useRef, useState } from 'react';\nimport { getAllAsciiChar, getDisplayNumMatrix, getLanding, getRandomAsciiChar } from '../util/util';\nimport CharTile from './CharTile';\n\nconst SET_TILES = \"SETTILES\";\nconst SET_TILE = \"SETTILE\";\nconst SET_CLICK_HANDLER = \"SETCLICKHANDLER\";\nconst SET_PLAYERS = \"SETPLAYERS\";\nconst INCREMENT_SCORE = \"INCREMENTSCORE\";\nconst RESET_SCORE = \"RESETSCORE\";\n\nconst reducer = (state, action) => {\n  let nextState = Object.assign({}, state);\n\n  let x;\n  let y;\n\n  switch (action.type) {\n    case SET_TILES:\n      nextState.tileMatrix = action.payload;\n      return nextState;\n    case SET_TILE:\n      x = action.payload.x;\n      y = action.payload.y;\n      const { char, properties } = action.payload;\n      nextState.tileMatrix[y][x].char = char;\n      nextState.tileMatrix[y][x].properties = properties;\n      return nextState;\n    case SET_CLICK_HANDLER:\n      x = action.payload.x;\n      y = action.payload.y;\n      const { handleClick } = action.payload;\n      nextState.tileMatrix[y][x].properties.handleClick = handleClick;\n      return nextState;\n    case SET_PLAYERS:\n      const { offsetX, offsetY } = action.payload;\n      nextState.players = action.payload.players;\n      if (nextState.players === 1) {\n        // 1P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 3; x <= 16; x++) {\n            if (y === 8) {\n              if ([3, 9, 10, 16].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n            }\n          };\n        };\n\n        // 2P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 20; x <= 33; x++) {\n            if (y === 8) {\n              if ([20, 26, 27, 33].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n            }\n          };\n        };\n      } else {\n        // 1P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 3; x <= 16; x++) {\n            if (y === 8) {\n              if ([3, 9, 10, 16].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n            }\n          };\n        };\n\n        // 2P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 20; x <= 33; x++) {\n            if (y === 8) {\n              if ([20, 26, 27, 33].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n            }\n          };\n        };\n      }\n      return nextState;\n    case INCREMENT_SCORE:\n      const oldScore = state.gameState.score[`p${action.payload.player}`];\n      nextState.gameState.score[`p${action.payload.player}`] = oldScore + action.payload.score;\n      return nextState;\n    case RESET_SCORE:\n      nextState.gameState.score.p1 = 0;\n      nextState.gameState.score.p2 = 0;\n      return nextState;\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  tileMatrix: [],\n  players: 2,\n  // Add logic for game state change\n  gameState: {\n    landing: true,\n    game: false,\n    winnder: undefined,\n    score: {\n      p1: 0,\n      p2: 0\n    }\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [p1PaddleCenter, setP1PaddleCenter] = useState();\n  const [p2PaddleCenter, setP2PaddleCenter] = useState();\n  // Temp solution, alt use state?\n  const [isGameActive, setIsGameActive] = useState(false);\n  const isGameActiveRef = useRef(isGameActive);\n  const p1PaddleCenterRef = useRef(p1PaddleCenter);\n  const p2PaddleCenterRef = useRef(p2PaddleCenter);\n\n  const xDirThreshold = 0.5;\n\n  const getRandomUnitDirectionVector = () => {\n    // X can't be less than something;\n    const x = Math.random() * (1 - xDirThreshold) + xDirThreshold;\n    const y = Math.random();\n    const xCoeff = Math.round(Math.random()) === 0 ? -1 : 1;\n    const yCoeff = Math.round(Math.random()) === 0 ? -1 : 1;\n    const magnitude = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n    return { x: xCoeff * x / magnitude, y: yCoeff * y / magnitude };\n  }\n\n  // TODO: ensure never up or down\n  const [ballDirection, setBallDirection] = useState(getRandomUnitDirectionVector());\n\n  const [ballPosition, setBallPosition] = useState({ x: 0, y: 0 });\n  const ballDirectionRef = useRef(ballDirection);\n  const ballPositionRef = useRef(ballPosition);\n\n  const paddle1YDiffRef = useRef(0);\n  const paddle2YDiffRef = useRef(0);\n\n  const setTiles = (tiles) => dispatch({\n    type: SET_TILES,\n    payload: tiles\n  });\n  \n  const setTile = (x, y, char, properties) => dispatch({\n    type: SET_TILE,\n    payload: {\n      x,\n      y,\n      char,\n      properties,\n    }\n  });\n  \n  const setClickHandler = (x, y, handleClick) => dispatch({\n    type: SET_CLICK_HANDLER,\n    payload: {\n      x,\n      y,\n      handleClick\n    }\n  });\n  \n  const setPlayers = (offsetX, offsetY, players) => dispatch({\n    type: SET_PLAYERS,\n    payload: {\n      offsetX,\n      offsetY,\n      players\n    },\n  });\n  \n  const incrementScore = (player) => dispatch({\n    type: INCREMENT_SCORE,\n    payload: {\n      player,\n      score: 1\n    }\n  });\n  \n  const resetScores = () => dispatch({\n    type: RESET_SCORE\n  });\n  \n  window.increment = incrementScore;\n  window.reset = resetScores;\n  \n  window.setTile = setTile;  \n\n  // Font Height: 19px, Width: 8.8px;\n  // Font Height: 14px, Width: 6.61px;\n  const appRef = useRef();\n\n  const [tileHeight, tileWidth] = [19, 9];\n  // const [tileHeight, tileWidth] = [14, 6.61];\n\n  // Size of box = 19px 9px\n  let numXTiles = Math.floor(document.body.clientWidth / tileWidth);\n  let numYTiles = Math.floor(document.body.clientHeight / tileHeight);\n  // console.log(`x: ${numXTiles}, y: ${numYTiles}`);\n\n  // Ensure always odd num\n  if (numXTiles % 2 === 0) {\n    numXTiles--;\n  };\n\n  if (numYTiles % 2 === 0) {\n    numYTiles--;\n  };\n  \n  // Mounted\n  useEffect(() => {\n    const initialRefMatrix = [];\n    \n    for (let y = 0; y < numYTiles; y++) {\n      const row = [];\n\n      for (let x = 0; x < numXTiles; x++) {\n        const char = getRandomAsciiChar();\n        const refObj = {\n          char,\n          properties: {\n            active: false\n          }\n        }\n        row.push(refObj)\n      }\n\n      initialRefMatrix.push(row);\n    };\n\n    setTiles(initialRefMatrix);\n\n    setupLanding();\n\n    setupPlayerKeybinds();\n  }, []);\n\n  const setupLanding = () => {\n    const landingMatrix = getLanding();\n    const offsetX = ((numXTiles - 1) / 2) - ((landingMatrix[0].length - 1) / 2);\n    const offsetY = ((numYTiles - 1) / 2) - ((landingMatrix.length - 1) / 2);\n    \n    for (let y = 0; y < landingMatrix.length; y++) {\n      for (let x = 0; x < landingMatrix[0].length; x++) {\n        const currEl = landingMatrix[y][x].char;\n        if (currEl !== \" \") {\n          let properties = {\n            active: true\n          };\n          \n          // Default 2P\n          if (\n            (y === 7 && (x >= 20 && x <= 33)) ||\n            (y === 8 && [20, 26, 27, 33].includes(x)) ||\n            (y === 9 && (x >= 20 && x <= 33))\n          ) {\n            properties.selected = true;\n          };\n          setTile(x + offsetX, y + offsetY, currEl, properties);\n        };\n      };\n    };\n\n    setupClickEvents(offsetX, offsetY);\n  }\n\n  const setupClickEvents = (offsetX, offsetY) => {\n    // 1P\n    for (let y = 7; y <= 9; y++) {\n      for (let x = 3; x <= 16; x++) {\n        const adjustedX = x + offsetX;\n        const adjustedY = y + offsetY;\n        const oneP = () => setPlayersCallback(offsetX, offsetY, 1);\n        setClickHandler(adjustedX, adjustedY, oneP);\n      };\n    };\n\n    // 2P\n    for (let y = 7; y <= 9; y++) {\n      for (let x = 20; x <= 33; x++) {\n        const adjustedX = x + offsetX;\n        const adjustedY = y + offsetY;\n        const twoP = () => setPlayersCallback(offsetX, offsetY, 2);\n        setClickHandler(adjustedX, adjustedY, twoP);\n      };\n    };\n\n    // Start\n    for (let y = 12; y <= 14; y++) {\n      for (let x = 9; x <= 27; x++) {\n        const adjustedX = x + offsetX;\n        const adjustedY = y + offsetY;\n        setClickHandler(adjustedX, adjustedY, startGameCallback);\n      };\n    };\n  };\n\n  const setPlayersCallback = (offsetX, offsetY, num) => {\n    console.log(`${num}P`);\n    setPlayers(offsetX, offsetY, num);\n  };\n\n  const startGameCallback = () => {\n    console.log(\"START GAME\");\n    clearLanding();\n    setupGameArea();\n    setIsGameActive(true);\n    isGameActiveRef.current = true;\n  }\n\n  const clearLanding = () => {\n    console.log(\"CLEAR LANDING\");\n    const landingMatrix = getLanding();\n    const offsetX = ((numXTiles - 1) / 2) - ((landingMatrix[0].length - 1) / 2);\n    const offsetY = ((numYTiles - 1) / 2) - ((landingMatrix.length - 1) / 2);\n    \n    for (let y = 0; y < landingMatrix.length; y++) {\n      for (let x = 0; x < landingMatrix[0].length; x++) {\n        const currEl = landingMatrix[y][x].char;\n        if (currEl !== \" \") {\n          const randChar = getRandomAsciiChar();\n          setTile(x + offsetX, y + offsetY, randChar, { active: false, clickable: false, handleClick: undefined });\n        };\n      };\n    };\n  };\n  \n  const xCenter = (numXTiles - 1) / 2;\n  const yCenter = (numYTiles - 1) / 2;\n  // TODO: Not responsive at all\n  // Add a different screen/warning for incompatible screen size?\n  const halfWidth = 45;\n  const halfHeight = 12;\n\n  let gameTick;\n  const ballSpeed = 1;\n\n  const setupGameArea = () => {\n    console.log(\"SETUP GAME AREA\");\n    setupGameBounds();\n    setupScoreBoard();\n    setupPaddles();\n    moveBallToPos({ x: xCenter, y: yCenter });\n    // set interval to update game physics\n    // TODO: Remember to clear interval when game finishes\n    gameTick = setInterval(() => {\n      handleBallGameTick();\n      handlePaddlesGameTick();\n    }, 1000 / 30);\n  };\n\n  const setupGameBounds = () => {\n    const [x1, x2] = [xCenter - halfWidth, xCenter + halfWidth];\n    const [y1, y2] = [yCenter - halfHeight, yCenter + halfHeight];\n\n    for (let y = y1; y <= y2; y++) {\n      for (let x = x1; x <= x2; x++) {\n        if (y === y1 || y === y2) {\n          setTile(x, y, \"-\", { active: true })\n        } else if (x === x1 || x === x2) {\n          setTile(x, y, \"|\", { active: true });\n        } else if (x === xCenter) {\n          // TODO: Should this be above the actual board?\n          // Or make the ball 2 full bar\n          setTile(x, y, \":\", { active: true })\n        }\n      }\n    };\n\n  };\n\n  const yOffset = 1;\n  const xOffsetLeft = xCenter - (2 + 5);\n  const xOffsetRight = xCenter + (2 + 1);\n\n  // TODO: Also need an update scoreboard method\n  const setupScoreBoard = () => {\n    const [y1, y2] = [yOffset, yOffset + 4];\n    const zero = getDisplayNumMatrix(0);\n    // Left bounds\n    for (let y = 0; y < 5; y++) {\n      for (let x = 0; x < 5; x++) {\n        const currChar = zero[y][x];\n        if (currChar !== \" \") {\n          setTile(x + xOffsetLeft, y + yOffset, currChar, { active: true });\n        }\n      }\n    }\n    // Middle bounds\n    setTile(xCenter, y1 + 1, \"●\", { active: true });\n    setTile(xCenter, y2 - 1, \"●\", { active: true });\n    // Right bounds\n    for (let y = 0; y < 5; y++) {\n      for (let x = 0; x < 5; x++) {\n        const currChar = zero[y][x];\n        if (currChar !== \" \") {\n          setTile(x + xOffsetRight, y + yOffset, currChar, { active: true });\n        }\n      }\n    }\n  }\n\n  const winningScore = 7;\n\n  // Not the most elegant solution to split them up\n\n  useEffect(() => {\n    if (state.gameState.score.p1 === 0) return;\n    \n    if (state.gameState.score.p1 <= winningScore) {\n      console.log(\"P1 Score changed\");\n      const prevScore = state.gameState.score.p1 - 1;\n      const currScore = prevScore + 1;\n      const prevScoreDisplay = getDisplayNumMatrix(prevScore);\n      const currScoreDisplay = getDisplayNumMatrix(currScore);\n      // Display num dimensions = 5x5\n      for (let y = 0; y < 5; y++) {\n        for (let x = 0; x < 5; x++) {\n          const currChar = currScoreDisplay[y][x];\n          if (currChar !== prevScoreDisplay[y][x]) {\n            if (currChar === \" \") {\n              setTile(x + xOffsetLeft, y + yOffset, getRandomAsciiChar(), { active: false })\n            } else {\n              setTile(x + xOffsetLeft, y + yOffset, currChar, { active: true })\n            }\n          }\n        }\n      }\n\n      if (state.gameState.score.p1 === winningScore) {\n        console.log(\"P1 wins\");\n        // Display win screen + back to home\n      }\n    };\n  }, [state.gameState.score.p1]);\n\n  \n  useEffect(() => {\n    if (state.gameState.score.p2 === 0) return;\n    \n    if (state.gameState.score.p2 <= winningScore) {\n      console.log(\"P2 Score changed\");\n      const prevScore = state.gameState.score.p2 - 1;\n      const currScore = prevScore + 1;\n      const prevScoreDisplay = getDisplayNumMatrix(prevScore);\n      const currScoreDisplay = getDisplayNumMatrix(currScore);\n      // Display num dimensions = 5x5\n      for (let y = 0; y < 5; y++) {\n        for (let x = 0; x < 5; x++) {\n          const currChar = currScoreDisplay[y][x];\n          if (currChar !== prevScoreDisplay[y][x]) {\n            if (currChar === \" \") {\n              setTile(x + xOffsetRight, y + yOffset, getRandomAsciiChar(), { active: false })\n            } else {\n              setTile(x + xOffsetRight, y + yOffset, currChar, { active: true })\n            }\n          }\n        }\n      }\n\n      if (state.gameState.score.p2 === winningScore) {\n        console.log(\"P2 wins\");\n        // Display win screen + back to home\n      }\n    };\n  }, [state.gameState.score.p2]);\n\n  const setupPlayerKeybinds = () => {\n    // TODO: Handle hold down?\n    // Make this a part of game tick to check performance\n    // Lags a little, might need to set up to calculate pos and handle every 30/60fps state rerender\n\n    document.addEventListener(\"keydown\", (e) => {\n      if (!isGameActiveRef.current) return;\n\n      // Limits\n      // y1 = top of screen, y2 = bottom of screen\n      const [y1, y2] = [yCenter - halfHeight + (paddleHeight - 1) / 2 + 1, yCenter + halfHeight - (paddleHeight - 1) / 2 - 1];\n      \n      switch(e.code) {\n        // P1\n        case \"KeyW\":\n          // if (p1PaddleCenterRef.current > yCenter - halfHeight + (paddleHeight - 1) / 2 + 1) {\n          if (paddle1YDiffRef.current > -halfHeight + 2) {\n            paddle1YDiffRef.current--;\n            // setP1PaddleCenter(p1PaddleCenterRef.current - 1);\n            // p1PaddleCenterRef.current--;\n            // movePaddle(1, p1PaddleCenterRef.current, -1);\n          }\n          break;\n        case \"KeyS\":\n          // if (p1PaddleCenterRef.current < yCenter + halfHeight - (paddleHeight - 1) / 2 - 1) {\n          if (paddle1YDiffRef.current < halfHeight - 2) {\n            paddle1YDiffRef.current++;\n            // setP1PaddleCenter(p1PaddleCenterRef.current + 1);\n            // p1PaddleCenterRef.current++;\n            // movePaddle(1, p1PaddleCenterRef.current, 1);\n          }\n          break;\n        // P2\n        case \"ArrowUp\":\n          if (p2PaddleCenterRef.current !== y1) {\n            setP2PaddleCenter(p2PaddleCenterRef.current - 1);\n            p2PaddleCenterRef.current--;\n            movePaddle(2, p2PaddleCenterRef.current, -1);\n          }\n          break;\n        case \"ArrowDown\":\n          if (p2PaddleCenterRef.current !== y2) {\n            setP2PaddleCenter(p2PaddleCenterRef.current + 1);\n            p2PaddleCenterRef.current++;\n            movePaddle(2, p2PaddleCenterRef.current, 1);\n          }\n          break;\n        default:\n          break;\n      }\n    });\n  };\n\n  const paddleHeight = 3;\n\n  const setupPaddles = () => {\n    // TODO: Add \"bounce\" property, also to walls\n\n    // P1 Paddle\n    // x = xCenter - halfWidth + 1\n    const p1PaddleX = xCenter - halfWidth + 1;\n    setTile(p1PaddleX, yCenter - (paddleHeight - 1) / 2, \"█\", { active: true })\n    setTile(p1PaddleX, yCenter, \"█\", { active: true })\n    setTile(p1PaddleX, yCenter + (paddleHeight - 1) / 2, \"█\", { active: true })\n    setP1PaddleCenter(yCenter);\n    p1PaddleCenterRef.current = yCenter;\n\n    // P2 Paddle\n    // x = xCenter + halfWidth - 1\n    const p2PaddleX = xCenter + halfWidth - 1;\n    setTile(p2PaddleX, yCenter - (paddleHeight - 1) / 2, \"█\", { active: true })\n    setTile(p2PaddleX, yCenter, \"█\", { active: true })\n    setTile(p2PaddleX, yCenter + (paddleHeight - 1) / 2, \"█\", { active: true })\n    setP2PaddleCenter(yCenter);\n    p2PaddleCenterRef.current = yCenter;\n  }\n\n  // TODO: Definitely need this to put on the same as game tick thread\n  const movePaddle = (player, currPos, direction) => {\n    const paddleX = player === 1 ? xCenter - halfWidth + 1 : xCenter + halfWidth - 1;\n\n    if (direction === -1) {\n      // Up\n      setTile(paddleX, currPos + 2, getRandomAsciiChar(), { active: false });\n      setTile(paddleX, currPos - 1, \"█\", { active: true });\n    } else {\n      // Down\n      setTile(paddleX, currPos - 2, getRandomAsciiChar(), { active: false });\n      setTile(paddleX, currPos + 1, \"█\", { active: true });\n    }\n  }\n\n  const movePaddleTo = (player, toPos) => {\n    // TODO: How do i get rid of previous?\n    const paddleX = player === 1 ? xCenter - halfWidth + 1 : xCenter + halfWidth - 1;\n    setTile(paddleX, toPos - 1, \"█\", { active: true });\n    setTile(paddleX, toPos, \"█\", { active: true });\n    setTile(paddleX, toPos + 1, \"█\", { active: true });\n    // setP1PaddleCenter(toPos);\n    // p1PaddleCenterRef.current = toPos;\n  }\n\n  const moveBallToPos = ({ x, y }) => {\n    setTile(Math.round(ballPositionRef.current.x), Math.round(ballPositionRef.current.y), getRandomAsciiChar(), { active: false, isBall: false });\n    setBallPosition({ x, y });\n    ballPositionRef.current = { x, y };\n    setTile(Math.round(x), Math.round(y), \"●\", { active: true, isBall: true });\n  }\n  \n  const handleBallGameTick = () => {\n    // TODO: Handle the ball destroying walls lol;\n    // Even after fix, it's still destroying walls rip\n    // I think it might be lag? Check back if updating paddle to gametick fixes it\n\n    // Direction should be unit vector, the multiply by speed?\n    const [nextX, nextY] = [\n      ballPositionRef.current.x + (ballDirectionRef.current.x * ballSpeed),\n      ballPositionRef.current.y + (ballDirectionRef.current.y * ballSpeed)\n    ];\n\n    let nextPos = { x: nextX, y: nextY };\n\n    // Paddle = bounce X\n    // Hardcoded based on paddle width\n    // Paddle hitbox tempfix\n    const tempHitboxFix = 0.5;\n\n    if (\n      (Math.round(nextX) <= xCenter - halfWidth + 1 && (Math.round(nextY) <= p1PaddleCenterRef.current + 1 + tempHitboxFix && Math.round(nextY) >= p1PaddleCenterRef.current - 1 - tempHitboxFix))\n      ||\n      (Math.round(nextX) >= xCenter + halfWidth - 1 && (Math.round(nextY) <= p2PaddleCenterRef.current + 1 + tempHitboxFix && Math.round(nextY) >= p2PaddleCenterRef.current - 1 - tempHitboxFix))\n    ) {\n      console.log(\"PADDLE\");\n      const paddleCenter = Math.round(nextX) <= xCenter - halfWidth + 1 ? p1PaddleCenterRef.current : p2PaddleCenterRef.current;\n      const newDir = getPaddleBouncedDir(nextY, paddleCenter, -ballDirectionRef.current.x);\n\n      nextPos.x = ballPositionRef.current.x + (newDir.x * ballSpeed);\n      nextPos.y = ballPositionRef.current.y + (newDir.y * ballSpeed);\n      setBallDirection(newDir);\n      ballDirectionRef.current = newDir;\n    } else {\n       // Left/Right walls = score for opposite side\n      if (Math.round(nextX) <= xCenter - halfWidth || Math.round(nextX) >= xCenter + halfWidth) {\n        nextPos = { x: xCenter, y: yCenter };\n        setBallPosition(nextPos);\n        // TODO: Add time delay (maybe hard)\n        const resetBallDirection = getRandomUnitDirectionVector();\n        setBallDirection(resetBallDirection);\n        ballDirectionRef.current = resetBallDirection;\n        if (Math.round(nextX) >= xCenter + halfWidth) {\n          console.log(\"RIGHT WALL\");\n          incrementScore(1);\n        } else {\n          console.log(\"LEFT WALL\");\n          incrementScore(2);\n        }\n      };\n    }\n\n    // Check if next pos collide\n    // Up/down walls = bounce Y, keep X\n    if (Math.round(nextY) <= yCenter - halfHeight || Math.round(nextY) >= yCenter + halfHeight) {\n      nextPos.y = ballPositionRef.current.y + (-ballDirectionRef.current.y * ballSpeed);\n      const yBounceDir = { x: ballDirectionRef.current.x, y: -ballDirectionRef.current.y };\n      setBallDirection(yBounceDir);\n      ballDirectionRef.current = yBounceDir;\n    }\n\n    // Check on boundary?\n\n    moveBallToPos(nextPos);\n  }\n\n  const getPaddleBouncedDir = (ballY, paddleCenter, xDir) => {\n    // I think this is still a little buggy\n    // BallY - PaddleCenter / PaddleWidth/2 * PI + Offset to ensure y dir !== 0;\n    const ratio = (ballY - paddleCenter) / 1.5;\n    let angle = (ratio * Math.PI);\n\n    const angleThreshold = Math.PI - 1.5;\n\n    if (Math.abs(angle) >= angleThreshold) {\n      angle = angle > 0 ? angleThreshold : -angleThreshold;\n    }\n\n    const x = xDir / Math.abs(xDir) * Math.tan(Math.abs(angle));\n    const magnitude = Math.sqrt(1 + Math.pow(x, 2));\n\n    return { y: angle / Math.abs(angle) / magnitude, x: x / magnitude };\n  }\n\n  const handlePaddlesGameTick = () => {\n    // P1\n    movePaddleTo(1, yCenter + paddle1YDiffRef.current)\n    // P2\n  }\n\n  return (\n    <div className=\"app\" ref={appRef}>\n      <ul className=\"rows\">\n        {state.tileMatrix.map((row, xidx) => {\n          return (\n            <li className={`row-${xidx}`} key={`row-${xidx}`}>\n              {row.map((tile, yidx) => {\n                return (\n                  <CharTile\n                    char={tile.char}\n                    active={tile.properties.active}\n                    selected={tile.properties.selected}\n                    handleClick={tile.properties.handleClick}\n                    key={`${xidx}-${yidx}`}\n                    isBall={tile.properties.isBall}\n                  />\n                )\n              })}\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\n\n// Removed StrictMode since it was calling reducer twice\n// Technically not best practice with my use of reducers, but oh well\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}