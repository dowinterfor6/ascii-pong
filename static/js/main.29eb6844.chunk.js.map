{"version":3,"sources":["util/util.js","components/CharTile.jsx","components/App.jsx","index.js"],"names":["getRandomAsciiChar","validNums","i","push","randNum","Math","round","random","length","String","fromCharCode","getLanding","docHeight","docWidth","landingLines","split","filter","line","map","trim","formattedLines","y","row","x","char","displayNumArr","getDisplayNumMatrix","num","el","str","getWinningBoard","winner","displayWinner","winningLines","formattedWinningLines","window","getNum","getWin","CharTile","active","selected","handleClick","isBall","tileRef","useRef","className","ref","onClick","MemoizedCharTile","React","memo","SET_TILES","SET_TILE","SET_CLICK_HANDLER","SET_PLAYERS","INCREMENT_SCORE","RESET_SCORE","reducer","state","action","nextState","Object","assign","type","tileMatrix","payload","properties","offsetX","offsetY","players","includes","oldScore","gameState","score","player","p1","p2","initialState","landing","game","undefined","App","useReducer","dispatch","useState","p1PaddleCenter","setP1PaddleCenter","p2PaddleCenter","setP2PaddleCenter","isGameActive","setIsGameActive","isGameActiveRef","p1PaddleCenterRef","p2PaddleCenterRef","getRandomUnitDirectionVector","xCoeff","yCoeff","magnitude","sqrt","pow","ballDirection","setBallDirection","ballPosition","setBallPosition","ballDirectionRef","ballPositionRef","paddle1YDiffRef","paddle2YDiffRef","paddle1PrevYRef","paddle2PrevYRef","gameTickRef","validKeys","keyDownRef","setTile","setClickHandler","incrementScore","increment","reset","appRef","numXTiles","floor","document","body","clientWidth","numYTiles","clientHeight","useEffect","initialRefMatrix","refObj","setupLanding","setupPlayerKeybinds","landingMatrix","currEl","setupClickEvents","setPlayersCallback","startGameCallback","console","log","setPlayers","clearLanding","setupGameArea","current","randChar","clickable","xCenter","yCenter","halfWidth","setupGameBounds","setupScoreBoard","setupPaddles","moveBallToPos","setInterval","handleBallGameTick","handlePaddlesGameTick","x1","x2","y1","y2","xOffsetLeft","xOffsetRight","zero","currChar","prevScore","currScore","prevScoreDisplay","currScoreDisplay","clearInterval","showWinningScreen","addEventListener","e","code","KeyW","KeyS","ArrowUp","ArrowDown","p1PaddleX","p2PaddleX","movePaddleTo","paddleX","from","to","nextX","nextY","nextPos","tempHitboxFix","paddleCenter","newDir","getPaddleBouncedDir","resetBallDirection","yBounceDir","ballY","xDir","angle","PI","angleThreshold","abs","tan","setTimeout","winningMatrix","xidx","tile","yidx","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.29eb6844.chunk.js","sourcesContent":["export const getRandomAsciiChar = () => {\n  // 33 to 165\n  // NOT 127\n  const validNums = [];\n  // Kinda normal chars\n  for (let i = 33; i <= 255; i++) {\n    if (i < 127 || i > 160) {\n      validNums.push(i);\n    }\n  }\n\n  const randIdx = Math.round(Math.random() * validNums.length);\n  const randNum = validNums[randIdx]\n  return String.fromCharCode(randNum);\n}\n\nexport const getAllAsciiChar = () => {\n  const validNums = [];\n  for (let i = 33; i <= 255; i++) {\n    if (i < 127 || i > 160) {\n      validNums.push(i);\n    }\n  }\n\n  return validNums.map((code) => String.fromCharCode(code));\n}\n\n\n\nexport const getLanding = (docHeight, docWidth) => {\n  const landingChar = `\n    <section>----------------------------\n    |                                   |\n    |                                   |\n    |        <h1>ASCII Pong</h1>        |\n    |                                   |\n    |                                   |\n    |                                   |\n    |  <option>------   <option>------  |\n    |  |     1P     |   |     2P     |  |\n    |  -----</option>   -----</option>  |\n    |                                   |\n    |                                   |\n    |        <button>-----------        |\n    |        |      Start      |        |\n    |        ----------</button>        |\n    |                                   |\n    |                                   |\n    |                                   |\n    ---------------------------</section>`;\n\n  let landingLines = landingChar\n    .split(\"\\n\")\n    .filter((line) => line !== \"\")\n    .map((line) => line.trim());\n\n  let formattedLines = [];\n  \n  // Assign char to matrix\n  for(let y = 0; y < landingLines.length; y++) {\n    const row = [];\n\n    for(let x = 0; x < landingLines[0].length; x++) {\n      row.push({ char: landingLines[y][x] });\n    };\n\n    formattedLines.push(row);\n  }\n\n  // Assign property to char in matrix, e.g. hover animation/bold\n  \n  return formattedLines;\n}\n\n// Imitate 7 Segment display\nconst displayNumArr = [\n`\n ███ \n█   █\n█   █\n█   █\n ███ `,\n`\n    █\n    █\n    █\n    █\n    █`,\n`\n█████\n    █\n█████\n█    \n█████`,\n`\n█████\n    █\n█████\n    █\n█████`,\n`\n█   █\n█   █\n█████\n    █\n    █`,\n`\n█████\n█    \n█████\n    █\n█████`,\n`\n█████\n█    \n█████\n█   █\n█████`,\n`\n█████\n    █\n    █\n    █\n    █`,\n`\n█████\n█   █\n█████\n█   █\n█████`,\n`\n█████\n█   █\n█████\n    █\n█████`\n];\n\nexport const getDisplayNumMatrix = (num) => {\n  // Can't be greater than 7 (score limit)\n  // so this method works\n  return displayNumArr[num].split(\"\\n\").filter((el) => el !== \"\").map((str) => str.split(\"\")); \n}\n\nexport const getWinningBoard = (winner) => {\n  const displayWinner = `P${winner}`;\n  const winningChars = `\n    <section>------------------------------------------\n    |                                                 |\n    |                                                 |\n    |        <h1>Congratulations, ${displayWinner} won!</h1>        |\n    |                                                 |\n    |                                                 |\n    |                                                 |\n    |                                                 |\n    |            <button>----------------             |\n    |            |       Main Menu      |             |\n    |            ---------------</button>             |\n    |                                                 |\n    |                                                 |\n    |                                                 |\n    -----------------------------------------</section>`\n\n  let winningLines = winningChars\n    .split(\"\\n\")\n    .filter((line) => line !== \"\")\n    .map((line) => line.trim());\n\n  let formattedWinningLines = [];\n  \n  // Assign char to matrix\n  for(let y = 0; y < winningLines.length; y++) {\n    const row = [];\n\n    for(let x = 0; x < winningLines[0].length; x++) {\n      row.push({ char: winningLines[y][x] });\n    };\n\n    formattedWinningLines.push(row);\n  }\n\n  return formattedWinningLines;\n}\n  \nwindow.getLanding = getLanding;\nwindow.getNum = getDisplayNumMatrix;\nwindow.getWin = getWinningBoard;\n// Useful:\n/*\n  Full Block: 9608\n  Smol block: 9642\n  Left Triangle: 9664\n  Triangles: 9698, 9699, 9700, 9701\n  Circle: 9679\n*/","import React, { useEffect, useRef } from 'react';\n\nconst CharTile = ({\n  char,\n  active,\n  selected,\n  handleClick,\n  isBall,\n}) => {\n  const tileRef = useRef();\n  // TODO: Add fade in animation at the start\n\n  return (\n    <div\n      className={`\n        char-tile\n        ${active ? 'active' : ''}\n        ${selected ? 'selected' : ''}\n        ${handleClick ? 'is-clickable' : ''}\n        ${isBall ? 'ball' : ''}\n      `}\n      ref={tileRef}\n      onClick={handleClick}\n    >\n      {char}\n    </div>\n  )\n}\n\nconst MemoizedCharTile = React.memo(CharTile);\n\nexport default MemoizedCharTile;\n","import React, { useEffect, useReducer, useRef, useState } from 'react';\nimport { getAllAsciiChar, getDisplayNumMatrix, getLanding, getRandomAsciiChar, getWinningBoard } from '../util/util';\nimport CharTile from './CharTile';\n\nconst SET_TILES = \"SETTILES\";\nconst SET_TILE = \"SETTILE\";\nconst SET_CLICK_HANDLER = \"SETCLICKHANDLER\";\nconst SET_PLAYERS = \"SETPLAYERS\";\nconst INCREMENT_SCORE = \"INCREMENTSCORE\";\nconst RESET_SCORE = \"RESETSCORE\";\n\nconst reducer = (state, action) => {\n  let nextState = Object.assign({}, state);\n\n  let x;\n  let y;\n\n  switch (action.type) {\n    case SET_TILES:\n      nextState.tileMatrix = action.payload;\n      return nextState;\n    case SET_TILE:\n      x = action.payload.x;\n      y = action.payload.y;\n      const { char, properties } = action.payload;\n      nextState.tileMatrix[y][x].char = char;\n      nextState.tileMatrix[y][x].properties = properties;\n      return nextState;\n    case SET_CLICK_HANDLER:\n      x = action.payload.x;\n      y = action.payload.y;\n      const { handleClick } = action.payload;\n      nextState.tileMatrix[y][x].properties.handleClick = handleClick;\n      return nextState;\n    case SET_PLAYERS:\n      const { offsetX, offsetY } = action.payload;\n      nextState.players = action.payload.players;\n      if (nextState.players === 1) {\n        // 1P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 3; x <= 16; x++) {\n            if (y === 8) {\n              if ([3, 9, 10, 16].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n            }\n          };\n        };\n\n        // 2P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 20; x <= 33; x++) {\n            if (y === 8) {\n              if ([20, 26, 27, 33].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n            }\n          };\n        };\n      } else {\n        // 1P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 3; x <= 16; x++) {\n            if (y === 8) {\n              if ([3, 9, 10, 16].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = false;\n            }\n          };\n        };\n\n        // 2P\n        for (let y = 7; y <= 9; y++) {\n          for (let x = 20; x <= 33; x++) {\n            if (y === 8) {\n              if ([20, 26, 27, 33].includes(x)) {\n                nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n              }\n            } else {\n              nextState.tileMatrix[y + offsetY][x + offsetX].properties.selected = true;\n            }\n          };\n        };\n      }\n      return nextState;\n    case INCREMENT_SCORE:\n      const oldScore = state.gameState.score[`p${action.payload.player}`];\n      nextState.gameState.score[`p${action.payload.player}`] = oldScore + action.payload.score;\n      return nextState;\n    case RESET_SCORE:\n      nextState.gameState.score.p1 = 0;\n      nextState.gameState.score.p2 = 0;\n      return nextState;\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  tileMatrix: [],\n  players: 2,\n  // Add logic for game state change\n  gameState: {\n    landing: true,\n    game: false,\n    winner: undefined,\n    score: {\n      p1: 0,\n      p2: 0\n    }\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [p1PaddleCenter, setP1PaddleCenter] = useState();\n  const [p2PaddleCenter, setP2PaddleCenter] = useState();\n\n  const [isGameActive, setIsGameActive] = useState(false);\n  const isGameActiveRef = useRef(isGameActive);\n\n  // TODO: I forgot if these are actually being used\n  const p1PaddleCenterRef = useRef(p1PaddleCenter);\n  const p2PaddleCenterRef = useRef(p2PaddleCenter);\n\n  const xDirThreshold = 0.5;\n\n  const getRandomUnitDirectionVector = () => {\n    // X can't be less than something;\n    const x = Math.random() * (1 - xDirThreshold) + xDirThreshold;\n    const y = Math.random();\n    const xCoeff = Math.round(Math.random()) === 0 ? -1 : 1;\n    const yCoeff = Math.round(Math.random()) === 0 ? -1 : 1;\n    const magnitude = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n    return { x: xCoeff * x / magnitude, y: yCoeff * y / magnitude };\n  }\n\n  // TODO: ensure never up or down\n  const [ballDirection, setBallDirection] = useState(getRandomUnitDirectionVector());\n\n  const [ballPosition, setBallPosition] = useState({ x: 0, y: 0 });\n  const ballDirectionRef = useRef(ballDirection);\n  const ballPositionRef = useRef(ballPosition);\n\n  const paddle1YDiffRef = useRef(0);\n  const paddle2YDiffRef = useRef(0);\n\n  const paddle1PrevYRef = useRef(0);\n  const paddle2PrevYRef = useRef(0);\n\n  const gameTickRef = useRef();\n  \n  const validKeys = [\"KeyW\", \"KeyS\", \"ArrowUp\", \"ArrowDown\"];\n\n  const keyDownRef = useRef({\n    \"KeyW\": false,\n    \"KeyS\": false,\n    \"ArrowUp\": false,\n    \"ArrowDown\": false\n  });\n\n  const setTiles = (tiles) => dispatch({\n    type: SET_TILES,\n    payload: tiles\n  });\n  \n  const setTile = (x, y, char, properties) => dispatch({\n    type: SET_TILE,\n    payload: {\n      x,\n      y,\n      char,\n      properties,\n    }\n  });\n  \n  const setClickHandler = (x, y, handleClick) => dispatch({\n    type: SET_CLICK_HANDLER,\n    payload: {\n      x,\n      y,\n      handleClick\n    }\n  });\n  \n  const setPlayers = (offsetX, offsetY, players) => dispatch({\n    type: SET_PLAYERS,\n    payload: {\n      offsetX,\n      offsetY,\n      players\n    },\n  });\n  \n  const incrementScore = (player) => dispatch({\n    type: INCREMENT_SCORE,\n    payload: {\n      player,\n      score: 1\n    }\n  });\n  \n  const resetScores = () => dispatch({\n    type: RESET_SCORE\n  });\n  \n  window.increment = incrementScore;\n  window.reset = resetScores;\n  \n  window.setTile = setTile;  \n\n  // Font Height: 19px, Width: 8.8px;\n  // Font Height: 14px, Width: 6.61px;\n  const appRef = useRef();\n\n  const [tileHeight, tileWidth] = [19, 9];\n  // const [tileHeight, tileWidth] = [14, 6.61];\n\n  // Size of box = 19px 9px\n  let numXTiles = Math.floor(document.body.clientWidth / tileWidth);\n  let numYTiles = Math.floor(document.body.clientHeight / tileHeight);\n  // console.log(`x: ${numXTiles}, y: ${numYTiles}`);\n\n  // Ensure always odd num\n  if (numXTiles % 2 === 0) {\n    numXTiles--;\n  };\n\n  if (numYTiles % 2 === 0) {\n    numYTiles--;\n  };\n  \n  // Mounted\n  useEffect(() => {\n    const initialRefMatrix = [];\n    \n    for (let y = 0; y < numYTiles; y++) {\n      const row = [];\n\n      for (let x = 0; x < numXTiles; x++) {\n        const char = getRandomAsciiChar();\n        const refObj = {\n          char,\n          properties: {\n            active: false\n          }\n        }\n        row.push(refObj)\n      }\n\n      initialRefMatrix.push(row);\n    };\n\n    setTiles(initialRefMatrix);\n\n    setupLanding();\n\n    setupPlayerKeybinds();\n  }, []);\n\n  const setupLanding = () => {\n    const landingMatrix = getLanding();\n    const offsetX = ((numXTiles - 1) / 2) - ((landingMatrix[0].length - 1) / 2);\n    const offsetY = ((numYTiles - 1) / 2) - ((landingMatrix.length - 1) / 2);\n    \n    for (let y = 0; y < landingMatrix.length; y++) {\n      for (let x = 0; x < landingMatrix[0].length; x++) {\n        const currEl = landingMatrix[y][x].char;\n        if (currEl !== \" \") {\n          let properties = {\n            active: true\n          };\n          \n          // Default 2P\n          if (\n            (y === 7 && (x >= 20 && x <= 33)) ||\n            (y === 8 && [20, 26, 27, 33].includes(x)) ||\n            (y === 9 && (x >= 20 && x <= 33))\n          ) {\n            properties.selected = true;\n          };\n          setTile(x + offsetX, y + offsetY, currEl, properties);\n        };\n      };\n    };\n\n    setupClickEvents(offsetX, offsetY);\n  }\n\n  const setupClickEvents = (offsetX, offsetY) => {\n    // 1P\n    for (let y = 7; y <= 9; y++) {\n      for (let x = 3; x <= 16; x++) {\n        const adjustedX = x + offsetX;\n        const adjustedY = y + offsetY;\n        const oneP = () => setPlayersCallback(offsetX, offsetY, 1);\n        setClickHandler(adjustedX, adjustedY, oneP);\n      };\n    };\n\n    // 2P\n    for (let y = 7; y <= 9; y++) {\n      for (let x = 20; x <= 33; x++) {\n        const adjustedX = x + offsetX;\n        const adjustedY = y + offsetY;\n        const twoP = () => setPlayersCallback(offsetX, offsetY, 2);\n        setClickHandler(adjustedX, adjustedY, twoP);\n      };\n    };\n\n    // Start\n    for (let y = 12; y <= 14; y++) {\n      for (let x = 9; x <= 27; x++) {\n        const adjustedX = x + offsetX;\n        const adjustedY = y + offsetY;\n        setClickHandler(adjustedX, adjustedY, startGameCallback);\n      };\n    };\n  };\n\n  const setPlayersCallback = (offsetX, offsetY, num) => {\n    console.log(`${num}P`);\n    setPlayers(offsetX, offsetY, num);\n  };\n\n  const startGameCallback = () => {\n    console.log(\"START GAME\");\n    clearLanding();\n    setupGameArea();\n    setIsGameActive(true);\n    isGameActiveRef.current = true;\n  }\n\n  const clearLanding = () => {\n    console.log(\"CLEAR LANDING\");\n    const landingMatrix = getLanding();\n    const offsetX = ((numXTiles - 1) / 2) - ((landingMatrix[0].length - 1) / 2);\n    const offsetY = ((numYTiles - 1) / 2) - ((landingMatrix.length - 1) / 2);\n    \n    for (let y = 0; y < landingMatrix.length; y++) {\n      for (let x = 0; x < landingMatrix[0].length; x++) {\n        const currEl = landingMatrix[y][x].char;\n        if (currEl !== \" \") {\n          const randChar = getRandomAsciiChar();\n          setTile(x + offsetX, y + offsetY, randChar, { active: false, clickable: false, handleClick: undefined });\n        };\n      };\n    };\n  };\n  \n  const xCenter = (numXTiles - 1) / 2;\n  const yCenter = (numYTiles - 1) / 2;\n  // TODO: Not responsive at all\n  // Add a different screen/warning for incompatible screen size?\n  const halfWidth = 45;\n  const halfHeight = 12;\n  const ballSpeed = 10;\n\n  const setupGameArea = () => {\n    console.log(\"SETUP GAME AREA\");\n    setupGameBounds();\n    setupScoreBoard();\n    setupPaddles();\n    moveBallToPos({ x: xCenter, y: yCenter });\n    // set interval to update game physics\n    // TODO: Remember to clear interval when game finishes\n    gameTickRef.current = setInterval(() => {\n      if (isGameActiveRef.current) {\n        handleBallGameTick();\n        handlePaddlesGameTick();\n      }\n    }, 1000 / 10);\n  };\n\n  const setupGameBounds = () => {\n    const [x1, x2] = [xCenter - halfWidth, xCenter + halfWidth];\n    const [y1, y2] = [yCenter - halfHeight, yCenter + halfHeight];\n\n    for (let y = y1; y <= y2; y++) {\n      for (let x = x1; x <= x2; x++) {\n        if (y === y1 || y === y2) {\n          setTile(x, y, \"-\", { active: true })\n        } else if (x === x1 || x === x2) {\n          setTile(x, y, \"|\", { active: true });\n        } else if (x === xCenter) {\n          // TODO: Should this be above the actual board?\n          // gave up after ~1 min of effort\n          setTile(x, y, \":\", { active: true })\n        }\n      }\n    };\n\n  };\n\n  const yOffset = 1;\n  const xOffsetLeft = xCenter - (2 + 5);\n  const xOffsetRight = xCenter + (2 + 1);\n\n  // TODO: Also need an update scoreboard method\n  const setupScoreBoard = () => {\n    const [y1, y2] = [yOffset, yOffset + 4];\n    const zero = getDisplayNumMatrix(0);\n    // Left bounds\n    for (let y = 0; y < 5; y++) {\n      for (let x = 0; x < 5; x++) {\n        const currChar = zero[y][x];\n        if (currChar !== \" \") {\n          setTile(x + xOffsetLeft, y + yOffset, currChar, { active: true });\n        }\n      }\n    }\n    // Middle bounds\n    setTile(xCenter, y1 + 1, \"●\", { active: true });\n    setTile(xCenter, y2 - 1, \"●\", { active: true });\n    // Right bounds\n    for (let y = 0; y < 5; y++) {\n      for (let x = 0; x < 5; x++) {\n        const currChar = zero[y][x];\n        if (currChar !== \" \") {\n          setTile(x + xOffsetRight, y + yOffset, currChar, { active: true });\n        }\n      }\n    }\n  }\n\n  const winningScore = 7;\n\n  // Not the most elegant solution to split them up\n\n  useEffect(() => {\n    if (state.gameState.score.p1 === 0) return;\n    \n    if (state.gameState.score.p1 <= winningScore) {\n      console.log(\"P1 Score changed\");\n      const prevScore = state.gameState.score.p1 - 1;\n      const currScore = prevScore + 1;\n      const prevScoreDisplay = getDisplayNumMatrix(prevScore);\n      const currScoreDisplay = getDisplayNumMatrix(currScore);\n      // Display num dimensions = 5x5\n      for (let y = 0; y < 5; y++) {\n        for (let x = 0; x < 5; x++) {\n          const currChar = currScoreDisplay[y][x];\n          if (currChar !== prevScoreDisplay[y][x]) {\n            if (currChar === \" \") {\n              setTile(x + xOffsetLeft, y + yOffset, getRandomAsciiChar(), { active: false })\n            } else {\n              setTile(x + xOffsetLeft, y + yOffset, currChar, { active: true })\n            }\n          }\n        }\n      }\n\n      if (state.gameState.score.p1 === winningScore) {\n        setIsGameActive(false);\n        isGameActiveRef.current = false;\n        clearInterval(gameTickRef.current);\n        showWinningScreen(1);\n      }\n    };\n  }, [state.gameState.score.p1]);\n\n  \n  useEffect(() => {\n    if (state.gameState.score.p2 === 0) return;\n    \n    if (state.gameState.score.p2 <= winningScore) {\n      console.log(\"P2 Score changed\");\n      const prevScore = state.gameState.score.p2 - 1;\n      const currScore = prevScore + 1;\n      const prevScoreDisplay = getDisplayNumMatrix(prevScore);\n      const currScoreDisplay = getDisplayNumMatrix(currScore);\n      // Display num dimensions = 5x5\n      for (let y = 0; y < 5; y++) {\n        for (let x = 0; x < 5; x++) {\n          const currChar = currScoreDisplay[y][x];\n          if (currChar !== prevScoreDisplay[y][x]) {\n            if (currChar === \" \") {\n              setTile(x + xOffsetRight, y + yOffset, getRandomAsciiChar(), { active: false })\n            } else {\n              setTile(x + xOffsetRight, y + yOffset, currChar, { active: true })\n            }\n          }\n        }\n      }\n\n      if (state.gameState.score.p2 === winningScore) {\n        setIsGameActive(false);\n        isGameActiveRef.current = false;\n        clearInterval(gameTickRef.current);\n        showWinningScreen(2);\n      }\n    };\n  }, [state.gameState.score.p2]);\n\n  const setupPlayerKeybinds = () => {\n    // TODO: Handle hold down?\n    // Make this a part of game tick to check performance\n    // Lags a little, might need to set up to calculate pos and handle every 30/60fps state rerender\n    // TODO: Handle both key press\n    \n    document.addEventListener(\"keyup\", (e) => {\n      if (!isGameActiveRef.current) return;\n\n      if (validKeys.includes(e.code)) {\n        keyDownRef.current[e.code] = false;\n      }\n    });\n\n    document.addEventListener(\"keydown\", (e) => {\n      if (!isGameActiveRef.current) return;\n\n      if (validKeys.includes(e.code)) {\n        switch(e.code) {\n          case \"KeyW\":\n            keyDownRef.current.KeyW = true;\n            keyDownRef.current.KeyS = false;\n            break;\n          case \"KeyS\":\n            keyDownRef.current.KeyW = false;\n            keyDownRef.current.KeyS = true;\n            break;\n          case \"ArrowUp\":\n            keyDownRef.current.ArrowUp = true;\n            keyDownRef.current.ArrowDown = false;\n            break;\n          case \"ArrowDown\":\n            keyDownRef.current.ArrowUp = false;\n            keyDownRef.current.ArrowDown = true;\n            break;\n          default:\n            break;\n        }\n      }\n    });\n  };\n\n  const paddleHeight = 3;\n\n  const setupPaddles = () => {\n\n    // P1 Paddle\n    // x = xCenter - halfWidth + 1\n    const p1PaddleX = xCenter - halfWidth + 1;\n    setTile(p1PaddleX, yCenter - (paddleHeight - 1) / 2, \"█\", { active: true })\n    setTile(p1PaddleX, yCenter, \"█\", { active: true })\n    setTile(p1PaddleX, yCenter + (paddleHeight - 1) / 2, \"█\", { active: true })\n    setP1PaddleCenter(yCenter);\n    p1PaddleCenterRef.current = yCenter;\n\n    // P2 Paddle\n    // x = xCenter + halfWidth - 1\n    const p2PaddleX = xCenter + halfWidth - 1;\n    setTile(p2PaddleX, yCenter - (paddleHeight - 1) / 2, \"█\", { active: true })\n    setTile(p2PaddleX, yCenter, \"█\", { active: true })\n    setTile(p2PaddleX, yCenter + (paddleHeight - 1) / 2, \"█\", { active: true })\n    setP2PaddleCenter(yCenter);\n    p2PaddleCenterRef.current = yCenter;\n  }\n\n  // TODO: Refactor this to handle both player check instead of using game tick method\n  const movePaddleTo = (player) => {\n    const paddleX = player === 1 ? xCenter - halfWidth + 1 : xCenter + halfWidth - 1;\n    // TODO: Doing this one lazily, remove all, add all, hope it doesn't bite back\n\n    if (player === 1) {\n      const needsUpdate = paddle1PrevYRef.current !== paddle1YDiffRef.current;\n\n      if (needsUpdate) {\n        const [from, to] = [yCenter + paddle1PrevYRef.current, yCenter + paddle1YDiffRef.current];\n\n        setTile(paddleX, from - 1, getRandomAsciiChar(), { active: false });\n        setTile(paddleX, from, getRandomAsciiChar(), { active: false });\n        setTile(paddleX, from + 1, getRandomAsciiChar(), { active: false });\n        \n        setTile(paddleX, to - 1, \"█\", { active: true });\n        setTile(paddleX, to, \"█\", { active: true });\n        setTile(paddleX, to + 1, \"█\", { active: true });\n\n        paddle1PrevYRef.current = paddle1YDiffRef.current;\n      }\n    } else if (player === 2) {\n      const needsUpdate = paddle2PrevYRef.current !== paddle2YDiffRef.current;\n\n      if (needsUpdate) {\n        const [from, to] = [yCenter + paddle2PrevYRef.current, yCenter + paddle2YDiffRef.current];\n\n        setTile(paddleX, from - 1, getRandomAsciiChar(), { active: false });\n        setTile(paddleX, from, getRandomAsciiChar(), { active: false });\n        setTile(paddleX, from + 1, getRandomAsciiChar(), { active: false });\n        \n        setTile(paddleX, to - 1, \"█\", { active: true });\n        setTile(paddleX, to, \"█\", { active: true });\n        setTile(paddleX, to + 1, \"█\", { active: true });\n\n        paddle2PrevYRef.current = paddle2YDiffRef.current;\n      }\n    }\n  }\n\n  const moveBallToPos = ({ x, y }) => {\n    // TODO: Do i actually need isBall?\n    setTile(Math.round(ballPositionRef.current.x), Math.round(ballPositionRef.current.y), getRandomAsciiChar(), { active: false, isBall: false });\n    setBallPosition({ x, y });\n    ballPositionRef.current = { x, y };\n    setTile(Math.round(x), Math.round(y), \"●\", { active: true, isBall: true });\n  }\n  \n  const handleBallGameTick = () => {\n    console.log(\"BALL TICK\");\n    // TODO: Handle the ball destroying walls lol;\n    // Even after fix, it's still destroying walls rip\n    // I think it might be lag? Check back if updating paddle to gametick fixes it\n\n    // Direction should be unit vector, the multiply by speed?\n    const [nextX, nextY] = [\n      ballPositionRef.current.x + (ballDirectionRef.current.x * ballSpeed),\n      ballPositionRef.current.y + (ballDirectionRef.current.y * ballSpeed)\n    ];\n\n    let nextPos = { x: nextX, y: nextY };\n\n    // Paddle = bounce X\n    // Hardcoded based on paddle width\n    // Paddle hitbox tempfix\n    const tempHitboxFix = 0.5;\n\n    const [x1, x2] = [xCenter - halfWidth + 1, xCenter + halfWidth - 1];\n    // TODO: Be careful about name overlap and scope\n    const [p1PaddleCenter, p2PaddleCenter] = [yCenter + paddle1YDiffRef.current, yCenter + paddle2YDiffRef.current];\n      \n    if (\n      (Math.round(nextX) <= x1 && (Math.round(nextY) <= p1PaddleCenter + 1 + tempHitboxFix && Math.round(nextY) >= p1PaddleCenter - 1 - tempHitboxFix))\n      ||\n      (Math.round(nextX) >= x2 && (Math.round(nextY) <= p2PaddleCenter + 1 + tempHitboxFix && Math.round(nextY) >= p2PaddleCenter - 1 - tempHitboxFix))\n    ) {\n      console.log(\"PADDLE\");\n      const paddleCenter = Math.round(nextX) <= xCenter - halfWidth + 1 ? p1PaddleCenter : p2PaddleCenter;\n      const newDir = getPaddleBouncedDir(nextY, paddleCenter, -ballDirectionRef.current.x);\n\n      nextPos.x = ballPositionRef.current.x + (newDir.x * ballSpeed);\n      nextPos.y = ballPositionRef.current.y + (newDir.y * ballSpeed);\n      setBallDirection(newDir);\n      ballDirectionRef.current = newDir;\n    } else {\n       // Left/Right walls = score for opposite side\n      if (Math.round(nextX) <= xCenter - halfWidth || Math.round(nextX) >= xCenter + halfWidth) {\n        nextPos = { x: xCenter, y: yCenter };\n        setBallPosition(nextPos);\n        // TODO: Add time delay (maybe hard)\n        const resetBallDirection = getRandomUnitDirectionVector();\n        setBallDirection(resetBallDirection);\n        ballDirectionRef.current = resetBallDirection;\n        if (Math.round(nextX) >= xCenter + halfWidth) {\n          console.log(\"RIGHT WALL\");\n          incrementScore(1);\n        } else {\n          console.log(\"LEFT WALL\");\n          incrementScore(2);\n        }\n      };\n    }\n\n    // Check if next pos collide\n    // Up/down walls = bounce Y, keep X\n    if (Math.round(nextY) <= yCenter - halfHeight || Math.round(nextY) >= yCenter + halfHeight) {\n      nextPos.y = ballPositionRef.current.y + (-ballDirectionRef.current.y * ballSpeed);\n      const yBounceDir = { x: ballDirectionRef.current.x, y: -ballDirectionRef.current.y };\n      setBallDirection(yBounceDir);\n      ballDirectionRef.current = yBounceDir;\n    }\n\n    // Check on boundary?\n\n    moveBallToPos(nextPos);\n  }\n\n  const getPaddleBouncedDir = (ballY, paddleCenter, xDir) => {\n    // I think this is still a little buggy\n    // BallY - PaddleCenter / PaddleWidth/2 * PI + Offset to ensure y dir !== 0;\n    const ratio = (ballY - paddleCenter) / 1.5;\n    let angle = (ratio * Math.PI);\n\n    const angleThreshold = Math.PI - 1.5;\n\n    if (Math.abs(angle) >= angleThreshold) {\n      angle = angle > 0 ? angleThreshold : -angleThreshold;\n    }\n\n    const x = xDir / Math.abs(xDir) * Math.tan(Math.abs(angle));\n    const magnitude = Math.sqrt(1 + Math.pow(x, 2));\n\n    return { y: angle / Math.abs(angle) / magnitude, x: x / magnitude };\n  }\n\n  const handlePaddlesGameTick = () => {\n    // P1\n    if (keyDownRef.current.KeyW) {\n      paddle1YDiffRef.current--;\n    } else if (keyDownRef.current.KeyS) {\n      paddle1YDiffRef.current++;\n    }\n    movePaddleTo(1)\n    // P2\n    if (keyDownRef.current.ArrowUp) {\n      paddle2YDiffRef.current--;\n    } else if (keyDownRef.current.ArrowDown) {\n      paddle2YDiffRef.current++;\n    }\n    movePaddleTo(2)\n  };\n\n  const showWinningScreen = (winner) => {\n    setTimeout(() => {\n      const winningMatrix = getWinningBoard(winner);\n      const offsetX = ((numXTiles - 1) / 2) - ((winningMatrix[0].length - 1) / 2);\n      const offsetY = ((numYTiles - 1) / 2) - ((winningMatrix.length - 1) / 2);\n  \n      for (let y = 0; y < winningMatrix.length; y++) {\n        for (let x = 0; x < winningMatrix[0].length; x++) {\n          const currEl = winningMatrix[y][x].char;\n          if (currEl !== \" \") {\n            let properties = {\n              active: true\n            };\n  \n            setTile(x + offsetX, y + offsetY, currEl, properties);\n          } else {\n            // TODO: Not needed if i fix middle line\n            if (x + offsetX === xCenter) {\n              setTile(x + offsetX, y + offsetY, getRandomAsciiChar(), { active: false });\n            }\n          }\n        };\n      };\n      console.log(`P${winner} won!`);\n    }, 200)\n\n    // setupClickEvents(offsetX, offsetY);\n  }\n\n  return (\n    <div className=\"app\" ref={appRef}>\n      <ul className=\"rows\">\n        {state.tileMatrix.map((row, xidx) => {\n          return (\n            <li className={`row-${xidx}`} key={`row-${xidx}`}>\n              {row.map((tile, yidx) => {\n                return (\n                  <CharTile\n                    char={tile.char}\n                    active={tile.properties.active}\n                    selected={tile.properties.selected}\n                    handleClick={tile.properties.handleClick}\n                    key={`${xidx}-${yidx}`}\n                    isBall={tile.properties.isBall}\n                  />\n                )\n              })}\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\n\n// Removed StrictMode since it was calling reducer twice\n// Technically not best practice with my use of reducers, but oh well\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}